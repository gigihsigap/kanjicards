{"version":3,"sources":["store.tsx","components/Header.tsx","pages/About.tsx","components/Footer.tsx","pages/AddCard.tsx","pages/EditCard.tsx","pages/HomePage.tsx","components/ProgressBar.tsx","pages/PracticeSession.tsx","pages/PracticeSettings.tsx","pages/DeckList.tsx","pages/ExportDeck.tsx","pages/AddDeck.tsx","pages/PreMadeDecks.tsx","App.tsx","index.tsx"],"names":["Card","cardData","kanji","hiragana","translate","this","sampleCards","store","cards","name","currentSession","deck","slice","correctCounter","playedCounter","totalCount","length","newCard","push","i","splice","allCards","oldArray","array","j","Math","floor","random","shuffle","pop","num","deckData","changeName","newCards","forEach","card","addCard","shuffleAllCards","exportedDeck","JSON","stringify","localStorage","setItem","importedDeck","getItem","parse","replaceDeck","allDecks","undefined","newDecks","JSONdata","oldDecks","concat","removeItem","Header","props","className","to","id","style","maxWidth","textAlign","margin","padding","Footer","require","useState","setKanji","setHiragana","setTranslate","submitForm","e","a","preventDefault","obj","split","saveToLocalStorage","history","onSubmit","type","fontSize","placeholder","value","onChange","target","useEffect","location","join","changeContent","pathname","deleteCard","removeCard","onClick","refresh","setRefresh","isLoading","setIsLoading","getFromLocalStorage","fontWeight","map","editCard","ProgressBar","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","transition","left","correctAnswers","wrongAnswers","answer","setAnswer","useCard","setUseCard","mode","promptType","answerType","numOfCards","Number","outOfCards","showResult","state","setState","progress","setProgress","score","setScore","setNumOfCards","firstcard","drawCard","checkAnswer","correctAnswer","translations","includes","prompt","check","input","ifWrong","meter","Array","from","document","querySelectorAll","loadNextCard","nextCard","marginBottom","display","alignItems","flexFlow","startPractice","marginTop","min","max","decks","setDecks","compileAllDecks","kanjidecks","getAllLocalDecks","routePrevent","route","removeFromLocalDecks","selectDeck","removeDeck","dataStr","encodeURIComponent","dlAnchorElem","getElementById","setAttribute","downloadJSON","defaultValue","deckName","setDeckName","justifyContent","files","fr","FileReader","onload","result","formatted","readAsText","item","uploadJSON","App","exact","path","component","HomePage","About","AddCard","EditCard","DeckList","AddDeck","ExportDeck","PreMadeDecks","PracticeSettings","PracticeSession","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7c1d82d0.chunk.js","sourcesContent":["function shuffle(oldArray: any) {\r\n  let array = oldArray.slice(0)\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\r\n    [array[i], array[j]] = [array[j], array[i]]; // swap elements\r\n  }\r\n  return array\r\n}\r\n\r\nclass Card {\r\n  kanji: string;\r\n  hiragana: string;\r\n  translate: Array<string>;\r\n  constructor(cardData: CardContent) {\r\n    this.kanji = cardData.kanji || ''\r\n    this.hiragana = cardData.hiragana || ''\r\n    this.translate = cardData.translate || []\r\n  }\r\n\r\n  changeContent(cardData: CardContent) {\r\n    this.kanji = cardData.kanji || ''\r\n    this.hiragana = cardData.hiragana || ''\r\n    this.translate = cardData.translate || []\r\n  }\r\n}\r\n\r\nlet sampleCards = [\r\n  new Card({\r\n    kanji: '学生',\r\n    hiragana: 'がくせい',\r\n    translate: ['student'],\r\n  }),\r\n  new Card({\r\n    kanji: '先生',\r\n    hiragana: 'せんせい',\r\n    translate: ['teacher', 'instructor', 'master', 'sensei', 'elder'],\r\n  }),\r\n  new Card({\r\n    kanji: '割引',\r\n    hiragana: 'わりびき',\r\n    translate: ['discount', 'reduction'],\r\n  })\r\n]\r\n\r\nclass Deck {\r\n  name: string;\r\n  cards: Array<Card>;\r\n  currentSession: any;\r\n  // id: string;\r\n\r\n  constructor(cards: Array<Card>) {\r\n    this.name = \"Sample Cards\"\r\n    this.cards = cards || sampleCards\r\n    this.currentSession = {\r\n      deck: this.cards.slice(0),\r\n      correctCounter: 0,\r\n      playedCounter: 0,\r\n      totalCount: this.cards.length\r\n    }\r\n  }\r\n\r\n  addCard(cardData: CardContent) {\r\n    let newCard = new Card(cardData)\r\n    this.cards.push(newCard)\r\n    return newCard\r\n  }\r\n\r\n  removeCard(i: number) {\r\n    this.cards.splice(i,1)\r\n  }\r\n\r\n  shuffleAllCards() {\r\n    let allCards = this.cards.slice(0)\r\n    this.currentSession.deck = shuffle(allCards)\r\n    this.currentSession.totalCount = allCards.length\r\n  }\r\n\r\n  drawCard() {\r\n    // return a card from the end and remove it from the deck\r\n    return this.currentSession.deck.pop()\r\n  }\r\n\r\n  setNumOfCards(num: number) {\r\n    // for practice session with a set number of cards\r\n    if (num >= this.cards.length || num <= 0) { return }\r\n    for (let i = this.currentSession.deck.length; i > num; i--) {\r\n      this.currentSession.deck.pop()\r\n    }\r\n  }\r\n\r\n  changeName(name: string) {\r\n    this.name = name\r\n  }\r\n\r\n  replaceDeck(deckData: Deck) {\r\n    // Changing name\r\n    this.changeName(deckData.name)\r\n    const newCards = deckData.cards\r\n\r\n    // Emptying cards in the Deck\r\n    this.cards = []\r\n\r\n    // Putting in all the new cards\r\n    newCards.forEach((card) => {\r\n      this.addCard(card)\r\n    })\r\n\r\n    // Shuffling the new deck\r\n    this.shuffleAllCards()\r\n  }\r\n\r\n  saveToLocalStorage() {\r\n    let deck = { name: this.name, cards: this.cards}\r\n    let exportedDeck = JSON.stringify(deck)\r\n    localStorage.setItem(\"kanjicards\", exportedDeck)\r\n  }\r\n\r\n  getFromLocalStorage() {\r\n    const importedDeck = localStorage.getItem(\"kanjicards\")\r\n    if (!importedDeck) { return }\r\n    const deck = JSON.parse(importedDeck)\r\n    this.replaceDeck(deck)\r\n  }\r\n\r\n  getAllLocalDecks() {\r\n    const allDecks = localStorage.getItem(\"kanjidecks\")\r\n    return (allDecks) ? JSON.parse(allDecks) : undefined \r\n  }\r\n\r\n  compileAllDecks() {\r\n    const cards = this.cards\r\n    const deck = { name: this.name, cards: cards }\r\n\r\n    const JSONdata = localStorage.getItem(\"kanjidecks\")\r\n    const oldDecks = JSONdata ? JSON.parse(JSONdata) : undefined\r\n    let newDecks\r\n\r\n    // If there's none stored yet, make a new array\r\n    if (oldDecks) {\r\n      newDecks = oldDecks.concat([deck])\r\n    }\r\n    else {\r\n      newDecks = [this]\r\n    }\r\n    localStorage.setItem(\"kanjidecks\", JSON.stringify(newDecks))\r\n  }\r\n\r\n  removeFromLocalDecks(i: number) {\r\n    const JSONdata = localStorage.getItem(\"kanjidecks\")\r\n    if (!JSONdata) { return }\r\n    let newDecks = JSON.parse(JSONdata)\r\n    newDecks.splice(i, 1)\r\n    localStorage.setItem(\"kanjidecks\", JSON.stringify(newDecks))\r\n  }\r\n\r\n  destroyLocalDecks() {\r\n    localStorage.removeItem(\"kanjidecks\")\r\n  }\r\n}\r\n\r\nconst store = new Deck(sampleCards)\r\n\r\nexport { store }\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header: React.FC<{}> = (props) => {\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <Link to=\"/\">\r\n          <div className=\"logo\">\r\n            Kanji Cards\r\n          </div>\r\n        </Link>\r\n        \r\n        <Link to=\"/practice-settings\">\r\n          <button className=\"btn\" id=\"practice\">\r\n            Practice!\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from '../components/Header';\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container about\">\r\n        <h1>How to Use</h1>\r\n        <div className=\"main-section\" style={{maxWidth: '680px',textAlign:\"justify\", margin: '0 auto', padding: '1em 0.5em'}}>\r\n        Kanji Cards is an app for memorizing kanji words made by Gap.\r\n        Test your kanji knowledge with those cards using Practice Mode! (Hint: it's on the top right!)\r\n        <br></br>\r\n        <br></br>\r\n        You can create your own cards by clicking \"Add Card\".\r\n        Type in the kanji word, how to read it in hiragana, and its translations.\r\n        Want to edit an existing card? Just click on the card! Simple as that.\r\n        <br></br>\r\n        <br></br>\r\n        Your set of cards is called a Deck, and ideally each deck should have a theme.\r\n        Want to switch deck? Click \"Manage Deck\" and select one you're going to use.\r\n        You can build a new deck from scratch, but you can also add pre-made decks!\r\n        <br></br>\r\n        <br></br>\r\n        This app also supports offline use. Just do a right click and save the page!\r\n        Save your cards using \"Export Deck\" feature. Load it back by going into \"Add Deck\"\r\n        and clicking \"Import Deck\". Your cards are stored locally in your browser too!\r\n        <br></br>\r\n        <br></br>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Footer: React.FC<{}> = (props) => {\r\n  return (\r\n    <div>\r\n      <div className=\"footer\">\r\n        <Link to=\"/about\">\r\n          <button>?</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    \r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n\r\n    // Validate empty card\r\n    if (kanji === '') { return }\r\n    if (hiragana === '') { return }\r\n    if (translate.length === 0) { return }\r\n\r\n    store.addCard(obj)\r\n    store.saveToLocalStorage()\r\n    props.history.push('/')\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-section\">\r\n        <h1>Add New Card</h1>\r\n        <form onSubmit={(e) => submitForm(e)}>\r\n          <div className=\"largecard\">\r\n            <input type=\"text\" style={{fontSize: '3em'}} placeholder=\"kanji\" name=\"kanji\" value={kanji} onChange={(e) => setKanji(e.target.value)}/>\r\n            <input type=\"text\" style={{fontSize: '1.5em'}} placeholder=\"hiragana\" name=\"hiragana\" value={hiragana} onChange={(e) => setHiragana(e.target.value)}/>\r\n            <input type=\"text\" style={{fontSize: '1em'}} placeholder=\"translation\" name=\"translate\" value={translate} onChange={(e) => setTranslate(e.target.value)}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">Save Card</button>\r\n        </form>\r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  useEffect(() => {\r\n    let obj = {\r\n      kanji: '',\r\n      hiragana: '',\r\n      translate: ['']\r\n    }\r\n\r\n    let cardData = props.location.cardData || obj\r\n    setKanji(cardData.kanji)\r\n    setHiragana(cardData.hiragana)\r\n    setTranslate(cardData.translate.join(','))\r\n  }, [])\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n\r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n\r\n    // Validate empty card\r\n    if (kanji === '') { return }\r\n    if (hiragana === '') { return }\r\n    if (translate.length === 0) { return }\r\n    \r\n    store.cards[props.location.id].changeContent(obj)\r\n    store.saveToLocalStorage()\r\n    props.history.push({\r\n      pathname:\"/\"\r\n    })\r\n  }\r\n\r\n  const deleteCard = async (id: number) => {\r\n    store.removeCard(id)\r\n    store.saveToLocalStorage()\r\n    props.history.push({\r\n      pathname:\"/\"\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Edit Card</h1>\r\n        <form onSubmit={(e) => submitForm(e)}>\r\n          <div className=\"largecard\">\r\n            <input\r\n              className=\"kanji\"\r\n              type=\"text\"\r\n              style={{fontSize: '3em'}}\r\n              placeholder=\"kanji\"\r\n              name=\"kanji\"\r\n              value={kanji}\r\n              onChange={(e) => setKanji(e.target.value)}/>\r\n            <input\r\n              className=\"hiragana\"\r\n              type=\"text\"\r\n              style={{fontSize: '1.5em'}}\r\n              placeholder=\"hiragana\"\r\n              name=\"hiragana\"\r\n              value={hiragana}\r\n              onChange={(e) => setHiragana(e.target.value)}/>\r\n            <input\r\n              className=\"translate\"\r\n              type=\"text\"\r\n              style={{fontSize: '1em'}}\r\n              placeholder=\"translation\"\r\n              name=\"translate\"\r\n              value={translate}\r\n              onChange={(e) => setTranslate(e.target.value)}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">Save Card</button>\r\n        </form>\r\n        <button className=\"btn\" onClick={() => deleteCard(props.location.id)}>Delete Card</button>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect }  from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [refresh, setRefresh] = useState(true)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    store.getFromLocalStorage()\r\n    setIsLoading(false);\r\n  }, [])\r\n\r\n  useEffect(() => {}, [refresh])\r\n\r\n  const addCard = () => {\r\n    props.history.push({\r\n      pathname:\"/add-card\"\r\n    })\r\n  }\r\n  \r\n  const editCard = (id: number, card: CardContent) => {\r\n    props.history.push({\r\n      pathname:\"/edit-card\",\r\n      cardData: card,\r\n      id: id\r\n    })\r\n  }\r\n\r\n  const deleteCard = async (id: number) => {\r\n    store.removeCard(id)\r\n    setRefresh(!refresh);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-section\" >\r\n        Your current deck is: <span style={{fontSize: '1.2em', fontWeight: 550}}> {store.name}</span>\r\n        <div className=\"button-links\">\r\n          <Link to=\"/practice-settings\" >\r\n            <button className=\"btn\" id=\"practice\">Practice!</button>\r\n          </Link>\r\n          <Link to=\"/deck-list\" >\r\n            <button className=\"btn\">Manage Deck</button>\r\n          </Link>\r\n          <Link to=\"/add-card\" >\r\n            <button className=\"btn\">Add Card</button>\r\n          </Link>\r\n          <Link to=\"/export-deck\" >\r\n            <button className=\"btn\">Export Deck</button>\r\n          </Link>\r\n        </div>\r\n        {(isLoading)\r\n        ? \"\"\r\n        : <div className=\"cardlist\">\r\n            {store.cards.map((card:CardContent, id:number) => {\r\n              return (\r\n                <div key={id} className=\"smallcard\" >\r\n                  <div onClick={() => editCard(id, card)}>\r\n                    <div className=\"kanji\">{card.kanji}</div>\r\n                    <div className=\"hiragana\">({card.hiragana})</div>\r\n                    <div className=\"translate\">{card.translate.slice(0,2).join(', ')}</div>\r\n                  </div>\r\n                  <div className=\"xbutton\" onClick={() => deleteCard(id)}>x</div>\r\n                </div>\r\n              )}\r\n            )}\r\n            <div className=\"smallcard\" onClick={() => addCard()}>\r\n              <div className=\"plusbutton\">+</div>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n","import React, { CSSProperties } from 'react';\r\n\r\ninterface ProgressBarProps {\r\n  bgcolor: string,\r\n  completed: number\r\n}\r\n\r\nconst ProgressBar: React.FC<ProgressBarProps> = (props: ProgressBarProps) => {\r\n  const { bgcolor, completed } = props;\r\n\r\n  const containerStyles:CSSProperties = {\r\n    height: '20px',\r\n    width: '700px',\r\n    backgroundColor: \"#e0e0de\",\r\n    borderRadius: 50,\r\n    left: '50%',\r\n    margin: '0 1.5em',\r\n  }\r\n\r\n  const fillerStyles:CSSProperties = {\r\n    height: '100%',\r\n    width: `${completed}%`,\r\n    backgroundColor: bgcolor,\r\n    borderRadius: 'inherit',\r\n    textAlign: 'right',\r\n    transition: 'width 1s',\r\n  }\r\n\r\n  return (\r\n      <div style={containerStyles}>\r\n        <div style={fillerStyles}>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ProgressBar;","import React, { useEffect, useState } from 'react';\r\nimport ProgressBar from '../components/ProgressBar'\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nlet correctAnswers:any = [];\r\nlet wrongAnswers:any = [];\r\n\r\nexport default (props: any) => {\r\n  const [answer, setAnswer] = useState('')\r\n  const [useCard, setUseCard] = useState({\r\n    kanji: '',\r\n    hiragana: '',\r\n    translate: [''],\r\n  })\r\n  const [state, setState] = useState({\r\n    mode: props.location.mode,\r\n    promptType: props.location.promptType,\r\n    answerType: props.location.answerType,\r\n    numOfCards: Number(props.location.numOfCards),\r\n    outOfCards: false,\r\n    showResult: true,\r\n  })\r\n  const [progress, setProgress] = useState(0)\r\n  const [score, setScore] = useState(0)\r\n\r\n  useEffect(() => {\r\n    correctAnswers = []\r\n    wrongAnswers = []\r\n    store.shuffleAllCards()\r\n    store.setNumOfCards(state.numOfCards)\r\n    const firstcard = store.drawCard()\r\n    setUseCard(firstcard)\r\n  }, [])\r\n\r\n  const ifCorrect = () => {\r\n    setScore(score + 1)\r\n    correctAnswers.push(useCard)\r\n  }\r\n\r\n  const ifWrong = () => {\r\n    const prompt:\"kanji\"|\"hiragana\"|\"translate\" = state.promptType\r\n    const check:\"kanji\"|\"hiragana\"|\"translate\" = state.answerType\r\n    let obj = {\r\n      check: false,\r\n      prompt: useCard[prompt],\r\n      input: answer,\r\n      correctAnswer: useCard[check],\r\n    }\r\n    if (prompt === \"translate\") obj.prompt = useCard.translate[0]\r\n    if (check === \"translate\") obj.correctAnswer = useCard.translate.slice(0,2).join(', ')\r\n    wrongAnswers.push(obj)\r\n  }\r\n\r\n  const checkAnswer = (e: any) => {\r\n    e.preventDefault()\r\n    if (!answer) return\r\n\r\n    let correctAnswer = ''\r\n    let translations = ['']\r\n\r\n    switch (state.mode) {\r\n      case 'kanji':\r\n        correctAnswer = useCard.kanji\r\n        break\r\n      case 'hiragana':\r\n        correctAnswer = useCard.hiragana\r\n        break\r\n      case 'translation':\r\n        translations = useCard.translate\r\n        break\r\n      default: break\r\n    }\r\n    \r\n    (answer === correctAnswer || translations.includes(answer)) ? ifCorrect() : ifWrong()\r\n    \r\n    const meter = (state.numOfCards-store.currentSession.deck.length)*100/state.numOfCards\r\n    setProgress(meter)\r\n\r\n    // Empties input form\r\n    Array.from(document.querySelectorAll(\"input\")).forEach(\r\n      input => (input.value = \"\")\r\n    );\r\n    setAnswer('')\r\n\r\n    loadNextCard()\r\n  }\r\n\r\n  const loadNextCard = () => {\r\n    let nextCard = store.drawCard()\r\n\r\n    if (nextCard !== undefined) {\r\n      setUseCard(nextCard)\r\n    }\r\n\r\n    else {\r\n      setState({...state, outOfCards: true})\r\n    }\r\n  }\r\n\r\n  const cancelPractice = () => {\r\n    props.history.push('/')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <div className=\"score\">\r\n          <div>Timer:</div>\r\n          <span>--</span>\r\n        </div>\r\n        <ProgressBar bgcolor=\"#6a1b9a\" completed={progress}/>\r\n        <div className=\"cancelpractice\" onClick={cancelPractice}>\r\n          X\r\n        </div>\r\n      </div>\r\n      {(state.outOfCards)\r\n      ? (<>\r\n          <h1>Practice complete!</h1>\r\n          <div style={{fontSize: '1.5em', margin: '0.5em 0'}}>You got {score} out of {state.numOfCards} cards correct!</div>\r\n          <div>\r\n            {(state.showResult)\r\n            ? <button className=\"btn\" onClick={() => (setState({...state, showResult: false}))}>Show Wrong Answers</button>\r\n            : <button className=\"btn\" onClick={() => (setState({...state, showResult: true}))}>Show Correct Answers</button>\r\n            }\r\n          </div>\r\n          <div>\r\n            {(state.showResult)\r\n            ? <div style={{fontSize: '1.2em', margin: '0.5em 0'}}>You answered correct on these cards:</div>\r\n            : <div style={{fontSize: '1.2em', margin: '0.5em 0'}}>... And here's where you can improve. Try again!</div>\r\n            }\r\n          </div>\r\n          <div>\r\n            {(state.showResult)\r\n            ? (<>\r\n              <div className=\"cardlist\">\r\n                {correctAnswers.map((card:any, id:number) => {\r\n                  return (\r\n                    <div key={id} className=\"resultcard\" id=\"true\">\r\n                      <div className=\"kanji\">{card.kanji}</div>\r\n                      <div className=\"hiragana\">({card.hiragana})</div>\r\n                      <div className=\"translate\">{card.translate.slice(0,2).join(', ')}</div>\r\n                    </div>\r\n                  )}\r\n                )}\r\n              </div>\r\n            </>)\r\n            : (<>\r\n              <div className=\"cardlist\">\r\n              {wrongAnswers.map((card:any, id:number) => {\r\n                return (\r\n                  <div key={id} className=\"resultcard\" id=\"false\">\r\n                    <div style={{fontSize: '2.3em', marginBottom: '0.05em'}}>{card.prompt}</div>\r\n                    <div className=\"lefttext\">Your answer: </div>\r\n                    <div className=\"righttext\">{card.input}</div>\r\n                    <div className=\"lefttext\">Correct answer: </div>\r\n                    <div className=\"righttext\">{card.correctAnswer}</div>\r\n                  </div>\r\n                )}\r\n              )}\r\n              </div>\r\n            </>)}\r\n          </div>\r\n        </>)\r\n      : (<div>\r\n        <div style={{height:'20px'}}></div>\r\n          <div className=\"largecard\">\r\n            <div>\r\n              {(state.mode === \"kanji\") ? <>\r\n                <div className=\"translate\" style={{fontSize: '2.5em'}}>{useCard.translate[0]}</div>\r\n              </> : ''}\r\n            \r\n              {(state.mode === \"hiragana\") ? <>\r\n                <div className=\"kanji\">{useCard.kanji}</div>\r\n              </> : ''}\r\n            \r\n              {(state.mode === \"translation\") ? <>\r\n                <div className=\"kanji\">{useCard.kanji}</div>\r\n                <div className=\"hiragana\">{useCard.hiragana}</div>\r\n              </> : ''}\r\n            </div>\r\n          </div>\r\n          <div style={{margin:'1em 0'}}>\r\n            What is the correct {state.mode} for this word?\r\n          </div>\r\n          <form style={{display:'flex', alignItems: 'center', flexFlow:'column'}} onSubmit={(e) => checkAnswer(e)}>\r\n            <input\r\n              type=\"text\"\r\n              id=\"answer\"\r\n              name=\"answer\" \r\n              placeholder=\"Type your answer here!\"\r\n              onChange={(e) => setAnswer(e.target.value)}/> \r\n            <button className=\"btn\" type=\"submit\">Submit</button>\r\n          </form>\r\n        </div>)}\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  // TODO: Add timed practice feature\r\n  // const [timer, setTimer] = useState('0')\r\n  const [numOfCards, setNumOfCards] = useState(store.cards.length)\r\n\r\n  const startPractice = (mode: string, promptType: string, answerType: string) => {\r\n    // TODO: Show settings error message\r\n    if (numOfCards > store.cards.length || numOfCards <= 0) { return }\r\n    props.history.push({ \r\n      pathname: '/practice-session',\r\n      numOfCards: numOfCards,\r\n      promptType: promptType,\r\n      answerType: answerType,\r\n      mode: mode\r\n     });\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1 style={{marginTop: '0.2em'}}>Choose a practice mode:</h1>\r\n        <div style={{display: 'flex', maxWidth: '500px', margin: '0 auto', flexFlow: 'column'}}>\r\n          \r\n          <div className=\"settingoption\" onClick={() => startPractice('translation', 'kanji', 'translate')}>\r\n            Kanji + Hiragana → Translation\r\n          </div>\r\n          <div className=\"settingoption\" onClick={() => startPractice('hiragana', 'kanji', 'hiragana')}>\r\n            Kanji → Hiragana\r\n          </div>\r\n          <div className=\"settingoption\" onClick={() => startPractice('kanji', 'translate', 'kanji')}>\r\n            Translation → Kanji\r\n          </div>\r\n        </div>\r\n\r\n        <h2>Other Settings:</h2>\r\n\r\n        <div >\r\n          Set number of cards: \r\n          <input style={{maxWidth: '2em', margin: '0 1em'}} type=\"number\" min={1} max={store.cards.length} onChange={(e) => setNumOfCards(e.target.value)} value={numOfCards} />\r\n        </div>\r\n              \r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect }  from 'react';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [decks, setDecks] = useState([store])\r\n\r\n  useEffect(() => {\r\n    store.compileAllDecks()\r\n    const kanjidecks = store.getAllLocalDecks()\r\n    setDecks(kanjidecks)\r\n  }, [])\r\n\r\n  const selectDeck = (id:number, deckData: Array<any>) => {\r\n    store.removeFromLocalDecks(id)\r\n    store.saveToLocalStorage()\r\n    store.replaceDeck(deckData)\r\n    props.history.push({\r\n      pathname:\"/\",\r\n    })\r\n  }\r\n\r\n  const removeDeck = (i: number) => {\r\n    // TODO: Trigger modal?\r\n    if (decks.length <= 1) { return } // TODO: Trigger modal cannot remove\r\n    store.removeFromLocalDecks(i)\r\n    let kanjidecks = store.getAllLocalDecks()\r\n    setDecks(kanjidecks)\r\n  }\r\n\r\n  const routePrevent = (route: number) => {\r\n    // This routing is specific to DeckList page\r\n    // to prevent duplicates in local storage data\r\n    // by selecting default deck before switching route\r\n    store.removeFromLocalDecks(decks.length-1)\r\n    store.saveToLocalStorage()\r\n    store.replaceDeck(store)\r\n\r\n    if (route === 1) props.history.push(\"/\")\r\n    if (route === 2) props.history.push(\"/practice-settings\")\r\n    if (route === 3) props.history.push(\"/add-deck\")\r\n    if (route === 4) props.history.push(\"/about\")\r\n    \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <a className=\"logo\" onClick={() => routePrevent(1)}>\r\n          Kanji Cards\r\n        </a>\r\n        <button className=\"btn\" id=\"practice\" onClick={() => routePrevent(2)}>\r\n          Practice!\r\n        </button>\r\n      </div>\r\n      \r\n      <button onClick={() => routePrevent(3)} className=\"btn\">\r\n        Import Deck / Add New Deck\r\n      </button>\r\n      <div style={{margin: \"1em\"}}>\r\n        Select a deck to study with:\r\n      </div>\r\n      <div className=\"main-section\" >\r\n        <div className=\"cardlist\">\r\n          {decks.map((deck:any, id:number) => {\r\n            return (\r\n              <div>\r\n                <div key={id} className=\"smallcard\"> \r\n                    <div style={{fontSize: '1.5em', fontWeight: 600, marginBottom: '0.2em'}}>{deck.name}</div>\r\n                    <div>Number of cards: {deck.cards.length}</div>\r\n                </div>\r\n                <button className=\"btn\" onClick={() => selectDeck(Number(id), deck)}>Select Deck</button>\r\n                <button className=\"btn\" onClick={() => removeDeck(Number(id))}>Remove Deck</button>\r\n              </div>\r\n            )}\r\n          )}\r\n        </div>\r\n          \r\n        \r\n        \r\n      </div>\r\n      <div className=\"footer\">\r\n        <button onClick={() => routePrevent(4)}>?</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n\r\n  const downloadJSON = () => {\r\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.cards));\r\n    var dlAnchorElem:any = document.getElementById('downloadAnchorElem');\r\n    dlAnchorElem.setAttribute(\"href\",dataStr);\r\n    // TODO: Allow space on file name?\r\n    dlAnchorElem.setAttribute(\"download\", `${store.name}.json`);\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Export Deck</h1>\r\n        <a id=\"downloadAnchorElem\" onClick={() => downloadJSON()}>\r\n          <button className=\"btn\">Click here to download as JSON!</button>\r\n        </a>\r\n        <div>\r\n          <textarea\r\n            defaultValue={JSON.stringify(store.cards,null,2)}\r\n            style={{width:'500px', height:'300px', marginTop: '1em'}}\r\n            />\r\n        </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [deckName, setDeckName] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    if (!deckName) { return }\r\n\r\n    let obj = {\r\n      name: deckName,\r\n      cards: []\r\n    }\r\n    store.replaceDeck(obj)\r\n    store.saveToLocalStorage()\r\n    props.history.push(\"/\")\r\n  }\r\n\r\n  const uploadJSON = () => {\r\n    const selectFiles:any = document.getElementById('selectFiles')\r\n    const files = selectFiles.files;\r\n    // console.log(files);\r\n    if (files.length <= 0) {\r\n      return false;\r\n    }\r\n\r\n    const fr = new FileReader();\r\n    \r\n    fr.onload = function(e: any) { \r\n      // console.log('onload', e);\r\n      if (!e.target.result) { return }\r\n      const result = JSON.parse(e.target.result);\r\n      const formatted = JSON.stringify(result, null, 2);\r\n      const target:any = document.getElementById('result')\r\n      target.value = formatted;\r\n\r\n      let obj = {\r\n        name: deckName,\r\n        cards: result || []\r\n      }\r\n      store.replaceDeck(obj)\r\n      store.saveToLocalStorage()\r\n      props.history.push(\"/\")\r\n    }\r\n    // console.log('readastext', fr)\r\n    fr.readAsText(files.item(0));\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header/>\r\n        <h1>Create New Deck</h1>\r\n        <div>\r\n          <form style={{display:'flex', alignItems: 'center', flexFlow:'column'}} onSubmit={(e) => submitForm(e)}>\r\n            <input placeholder=\"Insert deck name here...\" type=\"text\" onChange={(e) => setDeckName(e.target.value)}/>\r\n            <button type=\"submit\" className=\"btn\">Build New Deck</button>\r\n          </form>\r\n        </div>\r\n\r\n        <div style={{display: 'flex', justifyContent: 'center', flexFlow: 'column', maxWidth: '500px', margin: '0 auto'}}>\r\n          <textarea id=\"result\" style={{width:'250px', height:'250px', margin: '1em auto'}}>\r\n          \r\n          </textarea>\r\n          <input style={{width: '300px', margin: '1em auto'}} type=\"file\" id=\"selectFiles\"/>\r\n          <button style={{width: '300px', margin: '0 auto'}} className=\"btn\" id=\"import\" onClick={() => uploadJSON()}>Click to Import Cards from JSON file</button>\r\n        </div>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default () => {\r\n  // TODO: Add premade decks section\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n        \r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","import React, {useEffect} from 'react';\nimport {\n  MemoryRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport './App.css';\n\nimport About from './pages/About';\nimport AddCard from './pages/AddCard';\nimport EditCard from './pages/EditCard';\nimport HomePage from './pages/HomePage';\nimport PracticeSession from './pages/PracticeSession';\nimport PracticeSettings from './pages/PracticeSettings';\nimport DeckList from './pages/DeckList';\nimport ExportDeck from './pages/ExportDeck';\nimport AddDeck from './pages/AddDeck';\nimport PreMadeDecks from './pages/PreMadeDecks';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/add-card\" component={AddCard} />\n          <Route path=\"/edit-card\" component={EditCard} />\n          <Route path=\"/deck-list\" component={DeckList} />\n          <Route path=\"/add-deck\" component={AddDeck} />\n          <Route path=\"/export-deck\" component={ExportDeck} />\n          <Route path=\"/premades\" component={PreMadeDecks} />\n          <Route path=\"/practice-settings\" component={PracticeSettings} />\n          <Route path=\"/practice-session\" component={PracticeSession} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}