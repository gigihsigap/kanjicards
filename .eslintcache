[{"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx":"1","E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx":"2","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx":"3","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx":"4","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CardList.tsx":"5","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx":"6","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx":"7","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx":"8","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx":"9","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx":"10","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx":"11","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx":"12","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx":"13","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx":"14","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx":"15","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx":"16","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx":"17","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx":"18","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx":"19","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx":"20"},{"size":197,"mtime":1612408274919,"results":"21","hashOfConfig":"22"},{"size":1378,"mtime":1614512644148,"results":"23","hashOfConfig":"22"},{"size":165,"mtime":1612422709219,"results":"24","hashOfConfig":"22"},{"size":970,"mtime":1612426125034,"results":"25","hashOfConfig":"22"},{"size":333,"mtime":1614517151516,"results":"26","hashOfConfig":"22"},{"size":327,"mtime":1612426976529,"results":"27","hashOfConfig":"22"},{"size":477,"mtime":1612971232925,"results":"28","hashOfConfig":"22"},{"size":403,"mtime":1612971583170,"results":"29","hashOfConfig":"22"},{"size":2674,"mtime":1614517421753,"results":"30","hashOfConfig":"22"},{"size":259,"mtime":1614512573753,"results":"31","hashOfConfig":"22"},{"size":655,"mtime":1614511275719,"results":"32","hashOfConfig":"22"},{"size":1377,"mtime":1614518053987,"results":"33","hashOfConfig":"22"},{"size":4751,"mtime":1614517535244,"results":"34","hashOfConfig":"22"},{"size":1899,"mtime":1614512710559,"results":"35","hashOfConfig":"22"},{"size":2430,"mtime":1614517504725,"results":"36","hashOfConfig":"22"},{"size":2072,"mtime":1614516918083,"results":"37","hashOfConfig":"22"},{"size":2092,"mtime":1614517789456,"results":"38","hashOfConfig":"22"},{"size":977,"mtime":1614511048344,"results":"39","hashOfConfig":"22"},{"size":2919,"mtime":1614525251649,"results":"40","hashOfConfig":"22"},{"size":3617,"mtime":1614523083149,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"ctfnla",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"44"},"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx",[],["96","97"],"E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx",[],["98","99"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CardList.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx",["100"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx",[],["101","102"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx",["103"],"import React, { useState, useEffect }  from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport CardList from '../components/CardList';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default () => {\r\n  const [refresh, setRefresh] = useState(true)\r\n\r\n  useEffect(() => {\r\n    // Bad code? Probably remove this because it means your code relies on both LS and store.tsx\r\n    // let kanjicards = store.getFromLocalStorage()\r\n    // if (kanjicards) setCards(kanjicards)\r\n    // console.log('From local storage: \"kanjicards\"', kanjicards)\r\n  }, [refresh])\r\n\r\n  // const toggleTodo: ToggleTodo = selectedTodo => {\r\n  //   const newTodos = todos.map(todo => {\r\n  //     if (todo === selectedTodo) {\r\n  //       return {\r\n  //         ...todo,\r\n  //         complete: !todo.complete\r\n  //       }\r\n  //     }\r\n  //     return todo\r\n  //   })\r\n  //   setTodos(newTodos)\r\n  // }\r\n\r\n  const deleteCard = async (id: number) => {\r\n    store.removeCard(id)\r\n    setRefresh(!refresh);\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-section\" >\r\n        <p>Your current deck is: {store.name}</p>\r\n        <p>Manage your decks here:</p> <Link to=\"/deck-list\" ><button>Manage Deck</button></Link>\r\n        <Link to=\"/add-card\" ><button>Add Card</button></Link>\r\n        <Link to=\"/export-deck\" ><button>Export Deck</button></Link>\r\n        <CardList/>\r\n        {/* <TodoList todos={todos} toggleTodo={toggleTodo}/> */}\r\n        <div style={{\r\n          minHeight: '50vh',\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          justifyContent: 'space-between',\r\n          margin: '20px 100px',\r\n          }}>\r\n          {store.cards.map((card:CardContent, id:number) => {\r\n            return (\r\n              <div key={id} style={{\r\n                flex: \"0 24%\",\r\n                maxWidth: \"180px\",\r\n                height: \"200px\",\r\n                marginBottom: \"2%\", /* (100-24*5)/2 */\r\n                border: \"1px solid black\"\r\n              }}> \r\n                <ul>\r\n                  <li>{card.kanji}</li>\r\n                  <li>{card.hiragana}</li>\r\n                  <li>{card.translate.slice(0,2).join(', ')}</li>\r\n                </ul>\r\n                <Link to={{\r\n                  pathname:\"/edit-card\",\r\n                  cardData: card,\r\n                  id: id\r\n                }}><button>Edit</button></Link>\r\n                <button onClick={() => deleteCard(id)}>Delete</button>\r\n              </div>\r\n            )}\r\n          )}\r\n        </div>\r\n          \r\n          \r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx",["104"],"import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nexport default () => {\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>About the Project</h1>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx",[],["105","106"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx",["107"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    // const token = localStorage.owner_token\r\n    console.log(kanji, hiragana, translate)\r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n    store.addCard(obj)\r\n    props.history.push('/')\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Add New Card</h1>\r\n        <form>\r\n          <label htmlFor=\"kanji\">Kanji</label>\r\n          <input type=\"text\" id=\"kanji\" name=\"kanji\" onChange={(e) => setKanji(e.target.value)}/>\r\n          <label htmlFor=\"hiragana\">Hiragana</label>\r\n          <input type=\"text\" id=\"hiragana\" name=\"hiragana\" onChange={(e) => setHiragana(e.target.value)}/>\r\n          <label htmlFor=\"translate\">Translate</label>\r\n          <input type=\"text\" id=\"translate\" name=\"translate\" onChange={(e) => setTranslate(e.target.value)}/>\r\n        </form>\r\n        <button type=\"submit\" onClick={(e) => submitForm(e)}>Save Card</button>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx",["108","109"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  useEffect(() => {\r\n    // Harusnya kalau langsung ke edit, ganti halaman ke Add card\r\n    let obj = {\r\n      kanji: '',\r\n      hiragana: '',\r\n      translate: ['']\r\n    }\r\n    let cardData = props.location.cardData || obj\r\n    setKanji(cardData.kanji)\r\n    setHiragana(cardData.hiragana)\r\n    setTranslate(cardData.translate.join(','))\r\n  }, [])\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    // const token = localStorage.owner_token\r\n    console.log(kanji, hiragana, translate)\r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n    // Rapihin kode ini Pak\r\n    // console.log(store.cards[props.location.id])\r\n    store.cards[props.location.id].changeContent(obj)\r\n    store.saveToLocalStorage()\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Edit Card</h1>\r\n        <form>\r\n          <label htmlFor=\"kanji\">Kanji</label>\r\n          <input type=\"text\" id=\"kanji\" name=\"kanji\" value={kanji} onChange={(e) => setKanji(e.target.value)}/>\r\n          <label htmlFor=\"hiragana\">Hiragana</label>\r\n          <input type=\"text\" id=\"hiragana\" name=\"hiragana\" value={hiragana} onChange={(e) => setHiragana(e.target.value)}/>\r\n          <label htmlFor=\"translate\">Translate</label>\r\n          <input type=\"text\" id=\"translate\" name=\"translate\" value={translate} onChange={(e) => setTranslate(e.target.value)}/>\r\n        </form>\r\n        <button type=\"submit\" onClick={(e) => submitForm(e)}>Save Card</button>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx",["110"],"import React, { useState, useEffect }  from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default () => {\r\n  const [decks, setDecks] = useState([store])\r\n  // const [refresh, setRefresh] = useState(true)\r\n\r\n  useEffect(() => {\r\n\r\n    // Previous code: can store new LS from zero, but still can't detect changes to the deck.\r\n    // let kanjidecks = store.getAllLocalDecks()\r\n    // kanjidecks ? setDecks(kanjidecks) : store.compileAllDecks()\r\n    ////////////\r\n\r\n    store.compileAllDecks()\r\n    const kanjidecks = store.getAllLocalDecks()\r\n    setDecks(kanjidecks)\r\n  }, [])\r\n\r\n  const selectDeck = (i:number, deckData: Array<any>) => {\r\n    store.removeFromLocalDecks(i)\r\n    store.saveToLocalStorage()\r\n    store.replaceDeck(deckData)\r\n  }\r\n\r\n  const removeDeck = (i: number) => {\r\n    // Trigger modal\r\n    if (decks.length <= 1) { return } // Trigger modal nggak boleh remove\r\n    store.removeFromLocalDecks(i)\r\n    let kanjidecks = store.getAllLocalDecks()\r\n    setDecks(kanjidecks)\r\n    // setRefresh(!refresh)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-section\" >\r\n        <div style={{\r\n          minHeight: '50vh',\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          justifyContent: 'space-between',\r\n          margin: '20px 100px',\r\n          }}>\r\n          {decks.map((deck:any, id:number) => {\r\n            return (\r\n              <div key={id} style={{\r\n                flex: \"0 24%\",\r\n                maxWidth: \"180px\",\r\n                height: \"200px\",\r\n                marginBottom: \"2%\", /* (100-24*5)/2 */\r\n                border: \"1px solid black\"\r\n              }}> \r\n                <ul>\r\n                  <li>{deck.name}</li>\r\n                  <li>Number of cards: {deck.cards.length}</li>\r\n                </ul>\r\n                <Link to={{\r\n                    pathname:\"/\",\r\n                    id: id\r\n                  }}><button onClick={() => selectDeck(Number(id), deck)}>Select Deck</button></Link>\r\n                  <button onClick={() => removeDeck(Number(id))}>Remove Deck</button>\r\n              </div>\r\n            )}\r\n          )}\r\n        </div>\r\n          \r\n        <Link to=\"/add-deck\" ><button>Create New Deck</button></Link>\r\n        \r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx",["111","112","113","114","115"],"import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n  // Ganti sistem dari yang sekarang jadi punyanya Aliya\r\n\r\n  const downloadJSON = () => {\r\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.cards));\r\n    var dlAnchorElem:any = document.getElementById('downloadAnchorElem');\r\n    dlAnchorElem.setAttribute(\"href\",dataStr);\r\n    // Perlu handle ketika ada spasi di nama\r\n    dlAnchorElem.setAttribute(\"download\", `${store.name}.json`);\r\n  }\r\n\r\n  \r\n\r\n  const importFileChosen = (e:any) => {\r\n    // When a file is selected for import, read its content and put it into the state that fills the textbox.\r\n    // const theFile = e.target.files[0]\r\n\r\n    // let reader = new FileReader()\r\n\r\n    // reader.onload = (() => {\r\n    //   return (e) => {\r\n    //     this.update({\r\n    //       deckToImport: e.target.result\r\n    //     })\r\n    //   }\r\n    // })()\r\n\r\n    // reader.readAsText(theFile)\r\n  }\r\n\r\n  const importDeck = () => {\r\n    // const deckToImport = this.state.deckToImport\r\n    // const importedDeck = JSON.parse(deckToImport)\r\n\r\n    // this.props.deck.replaceDeck(importedDeck)\r\n    // this.props.updateDeck()\r\n\r\n    // this.update({ imported: true })\r\n  }\r\n\r\n  const changeImportText = (e: any) => {\r\n    // this.update({\r\n    //   deckToImport: e.target.value\r\n    // })\r\n  }\r\n\r\n  \r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        \r\n\r\n        {/* <input type=\"file\" onchange={ importFileChosen }>\r\n\r\n        <div>\r\n          <textarea oninput={ changeImportText }>{ state.deckToImport }</textarea>\r\n        </div>\r\n        <div>\r\n          <button onclick={ importDeck }>Click to import cards</button>\r\n        </div> */}\r\n        \r\n\r\n        <h1>Export</h1>\r\n        <textarea defaultValue={JSON.stringify(store.cards,null,2)} />\r\n        <a id=\"downloadAnchorElem\" onClick={() => downloadJSON()}><button>Download</button></a>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx",["116"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default () => {\r\n  const [deckName, setDeckName] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n\r\n    if (!deckName) { return }\r\n    // const token = localStorage.owner_token\r\n    // Gimana caranya supaya bisa import lewat masukin JSON, dan bisa bikin deck baru tanpa isi apapun\r\n    // const importedDeck = JSON.parse(deckToImport)\r\n    let obj = {\r\n      name: deckName,\r\n      cards: [{\r\n        kanji: '',\r\n        hiragana: '',\r\n        translate: [''],\r\n      }]\r\n    }\r\n    store.replaceDeck(obj)\r\n    store.saveToLocalStorage()\r\n  }\r\n\r\n  const uploadJSON = () => {\r\n    const selectFiles:any = document.getElementById('selectFiles')\r\n    const files = selectFiles.files;\r\n    console.log(files);\r\n    if (files.length <= 0) {\r\n      return false;\r\n    }\r\n\r\n    const fr = new FileReader();\r\n    \r\n    fr.onload = function(e: any) { \r\n      console.log(e);\r\n      if (!e.target.result) { return }\r\n      const result = JSON.parse(e.target.result);\r\n      const formatted = JSON.stringify(result, null, 2);\r\n      const target:any = document.getElementById('result')\r\n      target.value = formatted;\r\n    }\r\n    console.log('readastext')\r\n    fr.readAsText(files.item(0));\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Add New Deck</h1>\r\n        <form>\r\n          <label htmlFor=\"deckname\">Deck Name</label>\r\n          <input type=\"text\" id=\"kanji\" name=\"kanji\" onChange={(e) => setDeckName(e.target.value)}/>\r\n        </form>\r\n        <button type=\"submit\" onClick={(e) => submitForm(e)}>Create New Deck</button>\r\n        <h2>Or you can IMPORT a deck here</h2>\r\n\r\n        <input type=\"file\" id=\"selectFiles\" onSubmit={() => console.log('Submit!')} /><br />\r\n        <button id=\"import\" onClick={() => uploadJSON()}>Click to Import Cards</button>\r\n        <textarea id=\"result\">\r\n          \r\n        </textarea>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx",["117"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default () => {\r\n  const [deckName, setDeckName] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    let obj = {\r\n      name: deckName,\r\n      cards: [{\r\n        kanji: '',\r\n        hiragana: '',\r\n        translate: [''],\r\n      }]\r\n    }\r\n    console.log('HHHHHHHHHHH')\r\n    store.replaceDeck(obj)\r\n    // store.compileAllDecks()\r\n    store.saveToLocalStorage()\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Add New Deck</h1>\r\n        <form>\r\n          <label htmlFor=\"deckname\">Deck Name</label>\r\n          <input type=\"text\" id=\"kanji\" name=\"kanji\" onChange={(e) => setDeckName(e.target.value)}/>\r\n        </form>\r\n        <button type=\"submit\" onClick={(e) => submitForm(e)}>Create New Deck</button>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx",["118","119"],"import React, { useEffect, useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [answer, setAnswer] = useState('')\r\n  const [useCard, setUseCard] = useState({\r\n    kanji: '',\r\n    hiragana: '',\r\n    translate: [''],\r\n  })\r\n  const [state, setState] = useState({\r\n    outOfCards: false,\r\n    notificationMessage: '',\r\n    mode: props.location.mode,\r\n  })\r\n  const [score, setScore] = useState(0)\r\n\r\n\r\n  useEffect(() => {\r\n    console.log('Use Effect jalan', props)\r\n\r\n    // store.getFromLocalStorage()\r\n\r\n    store.shuffleAllCards()\r\n    const firstcard = store.drawCard()\r\n\r\n    \r\n    console.log('First card', firstcard)\r\n    setUseCard(firstcard)\r\n  }, [])\r\n\r\n  const promptCorrect = () => {\r\n    setScore(score + 1)\r\n    console.log(\"You're correct!\")\r\n  }\r\n\r\n  const promptWrong = () => {\r\n    console.log(\"You're wrong!\")\r\n  }\r\n\r\n\r\n  const checkAnswer = (e: any) => {\r\n    e.preventDefault()\r\n    if (!answer) return\r\n\r\n    let correctAnswer = ''\r\n    let translations = ['']\r\n\r\n    switch (state.mode) {\r\n      case 'kanji':\r\n        correctAnswer = useCard.kanji\r\n        break\r\n      case 'hiragana':\r\n        correctAnswer = useCard.hiragana\r\n        break\r\n      case 'translation':\r\n        translations = useCard.translate\r\n        break\r\n      default: break\r\n    }\r\n    \r\n    (answer === correctAnswer || translations.includes(answer)) ? promptCorrect() : promptWrong()\r\n    loadNextCard()\r\n  }\r\n\r\n  const loadNextCard = () => {\r\n    let nextCard = store.drawCard()\r\n\r\n    if (nextCard !== undefined) {\r\n      setUseCard(nextCard)\r\n    }\r\n\r\n    else {\r\n      setState({...state, outOfCards: true})\r\n    }\r\n  }\r\n\r\n  if (state.outOfCards) {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <h1>Training complete!</h1>\r\n        <h2>Your got {score} out of {store.currentSession.totalCount} correct</h2>\r\n        <Footer/>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div>\r\n        <Header />\r\n          <h1>Train yourself! (Mode: {state.mode})</h1>\r\n          <div style={{\r\n            maxWidth: \"180px\",\r\n            height: \"200px\",\r\n            marginBottom: \"2%\", /* (100-24*5)/2 */\r\n            border: \"1px solid black\"\r\n          }}>\r\n            <ul>\r\n              {(state.mode === 'kanji') ? <p>{useCard.translate[0]}</p> : ''}\r\n              {(state.mode === 'hiragana') ? <p>{useCard.kanji}</p> : ''}\r\n              {(state.mode === 'translation') ? <div><p>{useCard.kanji}</p><p>{useCard.hiragana}</p></div> : ''}\r\n            </ul>\r\n          </div>\r\n          <form>\r\n            <input type=\"text\" id=\"answer\" name=\"answer\" onChange={(e) => setAnswer(e.target.value)}/>\r\n          </form>\r\n          <button type=\"submit\" onClick={(e) => checkAnswer(e)}>Check Answer</button>\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx",["120","121"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nexport default (props: any) => {\r\n  \r\n  const [mode, setMode] = useState('translation')\r\n  const [timer, setTimer] = useState('0')\r\n\r\n  // const startPractice = () => {\r\n    // Can't really figure out how to deal with querySelectorAll in TS\r\n    // Will be dropping the hint selection feature\r\n    // mode kanji -> hint translation\r\n    // mode hiragana -> hint kanji\r\n    // mode translation -> hint kanji + hiragana\r\n\r\n    // const checkboxes = (document.querySelectorAll('input[type=\"checkbox\"]:checked'))\r\n    // const checkboxes = Array.from(document.querySelectorAll('input[type=\"checkbox\"]:checked'))\r\n    // const checkboxes = (document.getElementsByClassName('test') as HTMLInputElement)\r\n    // let checkboxes = [...document.querySelectorAll('input[type=\"checkbox\"]:checked')] <- works\r\n    \r\n    // console.log(checkboxes[0])\r\n    // if (checkboxes.length < 1) {\r\n    //   return // Show modal harus check minimal satu \r\n    // }\r\n    // console.log(checkboxes[0])\r\n    \r\n    // props.history.push('/practice-session')\r\n  // }\r\n\r\n  const startPractice = () => {\r\n    props.history.push({ \r\n      pathname: '/practice-session',\r\n      mode: mode\r\n     });\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Practice Settings</h1>\r\n\r\n        <div className=\"form-group\">\r\n          <label className=\"control-label col-md-4\" >Select practice mode:</label>\r\n            <div className=\"col-md-6\">\r\n              <select onChange={(e) => {setMode(e.target.value)}} value={mode}>\r\n                <option value=\"kanji\" >Kanji</option>\r\n                <option value=\"hiragana\" >Hiragana</option>\r\n                <option value=\"translation\">Translation</option>\r\n              </select>\r\n            </div>\r\n        </div>\r\n\r\n        <div>\r\n          Set timer\r\n          <input type=\"number\" onChange={(e) => setTimer(e.target.value)} />\r\n        </div>\r\n\r\n        \r\n              {/* {(mode === 'kanji')\r\n              ? (<>\r\n                <input type=\"checkbox\" value=\"hiragana\" onChange={(e) => changeHint(e)}/> Hiragana\r\n                <input type=\"checkbox\" value=\"translations\" onChange={(e) => changeHint(e)}/> Translations\r\n              </>) : '' }\r\n              {(mode === 'hiragana')\r\n              ? (<>\r\n                <input type=\"checkbox\" value=\"kanji\" onChange={(e) => changeHint(e)}/> Kanji\r\n                <input type=\"checkbox\" value=\"translations\" onChange={(e) => changeHint(e)}/> Translations\r\n              </>) : '' }\r\n              {(mode === 'translation')\r\n              ? (<>\r\n                <input id=\"test\" type=\"checkbox\" checked value=\"kanji\" onChange={(e) => changeHint(e)}/> Kanji\r\n                <input id=\"test\" type=\"checkbox\" checked value=\"hiragana\" onChange={(e) => changeHint(e)}/> Hiragana\r\n              </>) : '' } */}\r\n              \r\n        <button onClick={() => {startPractice()}}>Start Practice!</button>\r\n        <div style={{display:'none'}}>\r\n          <button  onClick={() => console.log(localStorage.removeItem(\"kanjicards\"))}>Remove Local Storage: KanjiCards</button>\r\n          <button  onClick={() => console.log(localStorage.removeItem(\"kanjidecks\"))}>Remove Local Storage: KanjiDecks</button>\r\n          <button  onClick={() => console.log(localStorage.getItem(\"kanjicards\"))}>Check Local Storage: KanjiCards</button>\r\n          <button  onClick={() => console.log(localStorage.getItem(\"kanjidecks\"))}>Check Local Storage: KanjiDecks</button>\r\n        </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"124","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":3,"column":11,"nodeType":"130","messageId":"131","endLine":3,"endColumn":16},{"ruleId":"122","replacedBy":"132"},{"ruleId":"124","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":10,"column":1,"nodeType":"136","endLine":85,"endColumn":2},{"ruleId":"134","severity":1,"message":"135","line":5,"column":1,"nodeType":"136","endLine":14,"endColumn":2},{"ruleId":"122","replacedBy":"137"},{"ruleId":"124","replacedBy":"138"},{"ruleId":"134","severity":1,"message":"135","line":7,"column":1,"nodeType":"136","endLine":41,"endColumn":2},{"ruleId":"134","severity":1,"message":"135","line":7,"column":1,"nodeType":"136","endLine":56,"endColumn":2},{"ruleId":"139","severity":1,"message":"140","line":23,"column":6,"nodeType":"141","endLine":23,"endColumn":8,"suggestions":"142"},{"ruleId":"134","severity":1,"message":"135","line":9,"column":1,"nodeType":"136","endLine":80,"endColumn":2},{"ruleId":"134","severity":1,"message":"135","line":7,"column":1,"nodeType":"136","endLine":78,"endColumn":2},{"ruleId":"128","severity":1,"message":"143","line":20,"column":9,"nodeType":"130","messageId":"131","endLine":20,"endColumn":25},{"ruleId":"128","severity":1,"message":"144","line":37,"column":9,"nodeType":"130","messageId":"131","endLine":37,"endColumn":19},{"ruleId":"128","severity":1,"message":"145","line":47,"column":9,"nodeType":"130","messageId":"131","endLine":47,"endColumn":25},{"ruleId":"146","severity":1,"message":"147","line":74,"column":9,"nodeType":"148","endLine":74,"endColumn":67},{"ruleId":"134","severity":1,"message":"135","line":7,"column":1,"nodeType":"136","endLine":70,"endColumn":2},{"ruleId":"134","severity":1,"message":"135","line":7,"column":1,"nodeType":"136","endLine":38,"endColumn":2},{"ruleId":"134","severity":1,"message":"135","line":7,"column":1,"nodeType":"136","endLine":115,"endColumn":2},{"ruleId":"139","severity":1,"message":"149","line":33,"column":6,"nodeType":"141","endLine":33,"endColumn":8,"suggestions":"150"},{"ruleId":"134","severity":1,"message":"135","line":5,"column":1,"nodeType":"136","endLine":86,"endColumn":2},{"ruleId":"128","severity":1,"message":"151","line":8,"column":10,"nodeType":"130","messageId":"131","endLine":8,"endColumn":15},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],["152"],["153"],"@typescript-eslint/no-unused-vars","'Props' is defined but never used.","Identifier","unusedVar",["152"],["153"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["152"],["153"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.cardData'. Either include it or remove the dependency array.","ArrayExpression",["154"],"'importFileChosen' is assigned a value but never used.","'importDeck' is assigned a value but never used.","'changeImportText' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["155"],"'timer' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [props.location.cardData]",{"range":"160","text":"161"},"Update the dependencies array to be: [props]",{"range":"162","text":"163"},[706,708],"[props.location.cardData]",[805,807],"[props]"]