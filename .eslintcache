[{"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx":"1","E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx":"2","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx":"3","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx":"4","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CardList.tsx":"5","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx":"6","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx":"7","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx":"8","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx":"9","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx":"10","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx":"11","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx":"12","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx":"13","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx":"14","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx":"15","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx":"16","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx":"17","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx":"18","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx":"19","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx":"20","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\ProgressBar.tsx":"21"},{"size":197,"mtime":1612408274919,"results":"22","hashOfConfig":"23"},{"size":1371,"mtime":1618164551301,"results":"24","hashOfConfig":"23"},{"size":304,"mtime":1615571917661,"results":"25","hashOfConfig":"23"},{"size":970,"mtime":1612426125034,"results":"26","hashOfConfig":"23"},{"size":333,"mtime":1614517151516,"results":"27","hashOfConfig":"23"},{"size":327,"mtime":1612426976529,"results":"28","hashOfConfig":"23"},{"size":477,"mtime":1612971232925,"results":"29","hashOfConfig":"23"},{"size":403,"mtime":1612971583170,"results":"30","hashOfConfig":"23"},{"size":2398,"mtime":1618164768748,"results":"31","hashOfConfig":"23"},{"size":1452,"mtime":1618163568442,"results":"32","hashOfConfig":"23"},{"size":507,"mtime":1618163554114,"results":"33","hashOfConfig":"23"},{"size":1572,"mtime":1616162491739,"results":"34","hashOfConfig":"23"},{"size":4098,"mtime":1618164334020,"results":"35","hashOfConfig":"23"},{"size":2331,"mtime":1617278801116,"results":"36","hashOfConfig":"23"},{"size":2725,"mtime":1618163547296,"results":"37","hashOfConfig":"23"},{"size":1036,"mtime":1616166128901,"results":"38","hashOfConfig":"23"},{"size":2305,"mtime":1616165797692,"results":"39","hashOfConfig":"23"},{"size":327,"mtime":1616166195396,"results":"40","hashOfConfig":"23"},{"size":6498,"mtime":1618162826549,"results":"41","hashOfConfig":"23"},{"size":1794,"mtime":1618162594760,"results":"42","hashOfConfig":"23"},{"size":803,"mtime":1616145473054,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"ctfnla",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx",[],["94","95"],"E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx",["96"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx",[],["97","98"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CardList.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx",["99"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx",[],["100","101"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx",["102","103"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx",["104"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx",["105"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    \r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n\r\n    // Validate empty card\r\n    if (kanji === '') { return }\r\n    if (hiragana === '') { return }\r\n    if (translate.length === 0) { return }\r\n\r\n    store.addCard(obj)\r\n    props.history.push('/')\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-section\">\r\n        <h1>Add New Card</h1>\r\n        <form onSubmit={(e) => submitForm(e)}>\r\n          <div className=\"largecard\">\r\n            <input type=\"text\" style={{fontSize: '3em'}} placeholder=\"kanji\" name=\"kanji\" value={kanji} onChange={(e) => setKanji(e.target.value)}/>\r\n            <input type=\"text\" style={{fontSize: '1.5em'}} placeholder=\"hiragana\" name=\"hiragana\" value={hiragana} onChange={(e) => setHiragana(e.target.value)}/>\r\n            <input type=\"text\" style={{fontSize: '1em'}} placeholder=\"translation\" name=\"translate\" value={translate} onChange={(e) => setTranslate(e.target.value)}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">Save Card</button>\r\n        </form>\r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx",["106","107"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  useEffect(() => {\r\n    let obj = {\r\n      kanji: '',\r\n      hiragana: '',\r\n      translate: ['']\r\n    }\r\n\r\n    let cardData = props.location.cardData || obj\r\n    setKanji(cardData.kanji)\r\n    setHiragana(cardData.hiragana)\r\n    setTranslate(cardData.translate.join(','))\r\n  }, [])\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n\r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n\r\n    // Validate empty card\r\n    if (kanji === '') { return }\r\n    if (hiragana === '') { return }\r\n    if (translate.length === 0) { return }\r\n    \r\n    store.cards[props.location.id].changeContent(obj)\r\n    store.saveToLocalStorage()\r\n    props.history.push({\r\n      pathname:\"/\"\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Edit Card</h1>\r\n        <form onSubmit={(e) => submitForm(e)}>\r\n          <div className=\"largecard\">\r\n            <input\r\n              className=\"kanji\"\r\n              type=\"text\"\r\n              style={{fontSize: '3em'}}\r\n              placeholder=\"kanji\"\r\n              name=\"kanji\"\r\n              value={kanji}\r\n              onChange={(e) => setKanji(e.target.value)}/>\r\n            <input\r\n              className=\"hiragana\"\r\n              type=\"text\"\r\n              style={{fontSize: '1.5em'}}\r\n              placeholder=\"hiragana\"\r\n              name=\"hiragana\"\r\n              value={hiragana}\r\n              onChange={(e) => setHiragana(e.target.value)}/>\r\n            <input\r\n              className=\"translate\"\r\n              type=\"text\"\r\n              style={{fontSize: '1em'}}\r\n              placeholder=\"translation\"\r\n              name=\"translate\"\r\n              value={translate}\r\n              onChange={(e) => setTranslate(e.target.value)}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">Save Card</button>\r\n        </form>\r\n        <button className=\"btn\">Delete Card</button>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx",["108","109"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx",["110","111"],"import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n\r\n  const downloadJSON = () => {\r\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.cards));\r\n    var dlAnchorElem:any = document.getElementById('downloadAnchorElem');\r\n    dlAnchorElem.setAttribute(\"href\",dataStr);\r\n    // TODO: Allow space on file name?\r\n    dlAnchorElem.setAttribute(\"download\", `${store.name}.json`);\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Export Deck</h1>\r\n        <a id=\"downloadAnchorElem\" onClick={() => downloadJSON()}>\r\n          <button className=\"btn\">Click here to download as JSON!</button>\r\n        </a>\r\n        <div>\r\n          <textarea\r\n            defaultValue={JSON.stringify(store.cards,null,2)}\r\n            style={{width:'500px', height:'300px', marginTop: '1em'}}\r\n            />\r\n        </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx",["112"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [deckName, setDeckName] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    if (!deckName) { return }\r\n\r\n    let obj = {\r\n      name: deckName,\r\n      cards: []\r\n    }\r\n    store.replaceDeck(obj)\r\n    store.saveToLocalStorage()\r\n    props.history.push(\"/\")\r\n  }\r\n\r\n  const uploadJSON = () => {\r\n    const selectFiles:any = document.getElementById('selectFiles')\r\n    const files = selectFiles.files;\r\n    // console.log(files);\r\n    if (files.length <= 0) {\r\n      return false;\r\n    }\r\n\r\n    const fr = new FileReader();\r\n    \r\n    fr.onload = function(e: any) { \r\n      // console.log('onload', e);\r\n      if (!e.target.result) { return }\r\n      const result = JSON.parse(e.target.result);\r\n      const formatted = JSON.stringify(result, null, 2);\r\n      const target:any = document.getElementById('result')\r\n      target.value = formatted;\r\n\r\n      let obj = {\r\n        name: deckName,\r\n        cards: result || []\r\n      }\r\n      store.replaceDeck(obj)\r\n      store.saveToLocalStorage()\r\n      props.history.push(\"/\")\r\n    }\r\n    // console.log('readastext', fr)\r\n    fr.readAsText(files.item(0));\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header/>\r\n        <h1>Create New Deck</h1>\r\n        <div>\r\n          <form style={{display:'flex', alignItems: 'center', flexFlow:'column'}} onSubmit={(e) => submitForm(e)}>\r\n            <input placeholder=\"Insert deck name here...\" type=\"text\" onChange={(e) => setDeckName(e.target.value)}/>\r\n            <button type=\"submit\" className=\"btn\">Build New Deck</button>\r\n          </form>\r\n        </div>\r\n\r\n        <div style={{display: 'flex', justifyContent: 'center', flexFlow: 'column', maxWidth: '500px', margin: '0 auto'}}>\r\n          <textarea id=\"result\" style={{width:'250px', height:'250px', margin: '1em auto'}}>\r\n          \r\n          </textarea>\r\n          <input style={{width: '300px', margin: '1em auto'}} type=\"file\" id=\"selectFiles\"/>\r\n          <button style={{width: '300px', margin: '0 auto'}} className=\"btn\" id=\"import\" onClick={() => uploadJSON()}>Click to Import Cards from JSON file</button>\r\n        </div>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx",["113","114","115"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default () => {\r\n  // TODO: Add premade decks section\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n        \r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx",["116","117"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx",["118"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\ProgressBar.tsx",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":1,"column":16,"nodeType":"125","messageId":"126","endLine":1,"endColumn":25},{"ruleId":"119","replacedBy":"127"},{"ruleId":"121","replacedBy":"128"},{"ruleId":"123","severity":1,"message":"129","line":3,"column":11,"nodeType":"125","messageId":"126","endLine":3,"endColumn":16},{"ruleId":"119","replacedBy":"130"},{"ruleId":"121","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":10,"column":1,"nodeType":"134","endLine":80,"endColumn":2},{"ruleId":"135","severity":1,"message":"136","line":16,"column":6,"nodeType":"137","endLine":16,"endColumn":8,"suggestions":"138"},{"ruleId":"132","severity":1,"message":"133","line":4,"column":1,"nodeType":"134","endLine":34,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":47,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":83,"endColumn":2},{"ruleId":"135","severity":1,"message":"139","line":23,"column":6,"nodeType":"137","endLine":23,"endColumn":8,"suggestions":"140"},{"ruleId":"132","severity":1,"message":"133","line":5,"column":1,"nodeType":"134","endLine":87,"endColumn":2},{"ruleId":"141","severity":1,"message":"142","line":49,"column":9,"nodeType":"143","endLine":49,"endColumn":61},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":33,"endColumn":2},{"ruleId":"141","severity":1,"message":"142","line":21,"column":9,"nodeType":"143","endLine":21,"endColumn":67},{"ruleId":"132","severity":1,"message":"133","line":6,"column":1,"nodeType":"134","endLine":72,"endColumn":2},{"ruleId":"123","severity":1,"message":"144","line":1,"column":17,"nodeType":"125","messageId":"126","endLine":1,"endColumn":25},{"ruleId":"123","severity":1,"message":"145","line":5,"column":8,"nodeType":"125","messageId":"126","endLine":5,"endColumn":13},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":17,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":9,"column":1,"nodeType":"134","endLine":198,"endColumn":2},{"ruleId":"135","severity":1,"message":"146","line":34,"column":6,"nodeType":"137","endLine":34,"endColumn":8,"suggestions":"147"},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":51,"endColumn":2},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["148"],["149"],"'Props' is defined but never used.",["148"],["149"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refresh'. Either include it or remove the dependency array. You can also do a functional update 'setRefresh(r => ...)' if you only need 'refresh' in the 'setRefresh' call.","ArrayExpression",["150"],"React Hook useEffect has a missing dependency: 'props.location.cardData'. Either include it or remove the dependency array.",["151"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'store' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'state.numOfCards'. Either include it or remove the dependency array.",["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [refresh]",{"range":"159","text":"160"},"Update the dependencies array to be: [props.location.cardData]",{"range":"161","text":"162"},"Update the dependencies array to be: [state.numOfCards]",{"range":"163","text":"164"},[450,452],"[refresh]",[641,643],"[props.location.cardData]",[965,967],"[state.numOfCards]"]