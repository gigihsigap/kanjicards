[{"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx":"1","E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx":"2","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx":"3","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx":"4","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CardList.tsx":"5","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx":"6","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx":"7","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx":"8","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx":"9","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx":"10","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx":"11","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx":"12","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx":"13","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx":"14","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx":"15","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx":"16","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx":"17","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx":"18","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx":"19","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx":"20"},{"size":197,"mtime":1612408274919,"results":"21","hashOfConfig":"22"},{"size":1358,"mtime":1615983331562,"results":"23","hashOfConfig":"22"},{"size":304,"mtime":1615571917661,"results":"24","hashOfConfig":"22"},{"size":970,"mtime":1612426125034,"results":"25","hashOfConfig":"22"},{"size":333,"mtime":1614517151516,"results":"26","hashOfConfig":"22"},{"size":327,"mtime":1612426976529,"results":"27","hashOfConfig":"22"},{"size":477,"mtime":1612971232925,"results":"28","hashOfConfig":"22"},{"size":403,"mtime":1612971583170,"results":"29","hashOfConfig":"22"},{"size":2268,"mtime":1615988672231,"results":"30","hashOfConfig":"22"},{"size":1207,"mtime":1615634727816,"results":"31","hashOfConfig":"22"},{"size":507,"mtime":1615989688901,"results":"32","hashOfConfig":"22"},{"size":1471,"mtime":1615634036620,"results":"33","hashOfConfig":"22"},{"size":4986,"mtime":1615574528143,"results":"34","hashOfConfig":"22"},{"size":1925,"mtime":1615636077664,"results":"35","hashOfConfig":"22"},{"size":2549,"mtime":1615988566123,"results":"36","hashOfConfig":"22"},{"size":1042,"mtime":1615990456546,"results":"37","hashOfConfig":"22"},{"size":2165,"mtime":1615991272801,"results":"38","hashOfConfig":"22"},{"size":977,"mtime":1614511048344,"results":"39","hashOfConfig":"22"},{"size":2907,"mtime":1615574705273,"results":"40","hashOfConfig":"22"},{"size":3848,"mtime":1615573796755,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"ctfnla",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx",[],["91","92"],"E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx",[],["93","94"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CardList.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx",["95"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx",[],["96","97"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx",["98"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx",["99","100","101"],"import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nexport default () => {\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <h1>About the Project</h1>\r\n        <div className=\"main-section\">\r\n        Kanjicards is an app for memorizing Kanji words. Somehow they operate differently from individual kanji letters.\r\n        So I made this app to prepare for a Japanese language course and practice my TypeScript. Two birds with one stone.\r\n\r\n        In case you're here just to use the Practice feature, I prepared some of the cards I used during my studies\r\n        so you don't have to make them from scratch.\r\n\r\n        This project is heavily inspired from Pseudomon's <a href=\"https://pseudomon.github.io/lightningcards/#\">Lightning Cards</a>. This app is completely front-end,\r\n        so you can save the page and it'll work offline. It automatically saves your decks locally in your browser,\r\n        but you can also use the import/exporter feature to create a backup or to move to a different system/browser.\r\n\r\n        <a>Repository Link</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx",["102"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    // const token = localStorage.owner_token\r\n    console.log(kanji, hiragana, translate)\r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n    store.addCard(obj)\r\n    props.history.push('/')\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-section\">\r\n        <h1>Add New Card</h1>\r\n          <form>\r\n            <label htmlFor=\"kanji\">Kanji</label>\r\n            <input type=\"text\" id=\"kanji\" name=\"kanji\" onChange={(e) => setKanji(e.target.value)}/>\r\n            <label htmlFor=\"hiragana\">Hiragana</label>\r\n            <input type=\"text\" id=\"hiragana\" name=\"hiragana\" onChange={(e) => setHiragana(e.target.value)}/>\r\n            <label htmlFor=\"translate\">Translate</label>\r\n            <input type=\"text\" id=\"translate\" name=\"translate\" onChange={(e) => setTranslate(e.target.value)}/>\r\n          </form>\r\n        <button type=\"submit\" className=\"btn\" onClick={(e) => submitForm(e)}>Save Card</button>\r\n      </div>\r\n        \r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx",["103","104"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  useEffect(() => {\r\n    console.log('Use Effect jalan', props)\r\n    // Harusnya kalau langsung ke edit, ganti halaman ke Add card\r\n    let obj = {\r\n      kanji: '',\r\n      hiragana: '',\r\n      translate: ['']\r\n    }\r\n    let cardData = props.location.cardData || obj\r\n    setKanji(cardData.kanji)\r\n    setHiragana(cardData.hiragana)\r\n    setTranslate(cardData.translate.join(','))\r\n  }, [])\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    // const token = localStorage.owner_token\r\n    console.log(kanji, hiragana, translate)\r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n    // Rapihin kode ini Pak\r\n    // console.log(store.cards[props.location.id])\r\n    store.cards[props.location.id].changeContent(obj)\r\n    store.saveToLocalStorage()\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Edit Card</h1>\r\n        <div className=\"largecard\">\r\n          <form style={{display: 'flex', flexFlow: 'column wrap'}}>\r\n            <input type=\"text\" id=\"kanji\" name=\"kanji\" value={kanji} onChange={(e) => setKanji(e.target.value)}/>\r\n            <input type=\"text\" id=\"hiragana\" name=\"hiragana\" value={hiragana} onChange={(e) => setHiragana(e.target.value)}/>\r\n            <input type=\"text\" id=\"translate\" name=\"translate\" value={translate} onChange={(e) => setTranslate(e.target.value)}/>\r\n          </form>\r\n        </div>\r\n        \r\n        <button type=\"submit\" className=\"btn\" onClick={(e) => submitForm(e)}>Save Card</button>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx",["105","106"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx",["107","108"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx",["109"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx",["110"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default () => {\r\n  const [deckName, setDeckName] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    let obj = {\r\n      name: deckName,\r\n      cards: [{\r\n        kanji: '',\r\n        hiragana: '',\r\n        translate: [''],\r\n      }]\r\n    }\r\n    console.log('HHHHHHHHHHH')\r\n    store.replaceDeck(obj)\r\n    // store.compileAllDecks()\r\n    store.saveToLocalStorage()\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Add New Deck</h1>\r\n        <form>\r\n          <label htmlFor=\"deckname\">Deck Name</label>\r\n          <input type=\"text\" id=\"kanji\" name=\"kanji\" onChange={(e) => setDeckName(e.target.value)}/>\r\n        </form>\r\n        <button type=\"submit\" onClick={(e) => submitForm(e)}>Create New Deck</button>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx",["111","112"],"import React, { useEffect, useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [answer, setAnswer] = useState('')\r\n  const [useCard, setUseCard] = useState({\r\n    kanji: '',\r\n    hiragana: '',\r\n    translate: [''],\r\n  })\r\n  const [state, setState] = useState({\r\n    mode: props.location.mode,\r\n    numOfCards: Number(props.location.numOfCards),\r\n    outOfCards: false,\r\n  })\r\n  const [score, setScore] = useState(0)\r\n\r\n\r\n  useEffect(() => {\r\n    console.log('Use Effect jalan', props)\r\n\r\n    store.shuffleAllCards()\r\n    store.setNumOfCards(state.numOfCards)\r\n    const firstcard = store.drawCard()\r\n\r\n    \r\n    console.log('First card', firstcard)\r\n    setUseCard(firstcard)\r\n  }, [])\r\n\r\n  const promptCorrect = () => {\r\n    setScore(score + 1)\r\n    console.log(\"You're correct!\")\r\n  }\r\n\r\n  const promptWrong = () => {\r\n    console.log(\"You're wrong!\")\r\n  }\r\n\r\n\r\n  const checkAnswer = (e: any) => {\r\n    e.preventDefault()\r\n    if (!answer) return\r\n\r\n    let correctAnswer = ''\r\n    let translations = ['']\r\n\r\n    switch (state.mode) {\r\n      case 'kanji':\r\n        correctAnswer = useCard.kanji\r\n        break\r\n      case 'hiragana':\r\n        correctAnswer = useCard.hiragana\r\n        break\r\n      case 'translation':\r\n        translations = useCard.translate\r\n        break\r\n      default: break\r\n    }\r\n    \r\n    (answer === correctAnswer || translations.includes(answer)) ? promptCorrect() : promptWrong()\r\n    loadNextCard()\r\n  }\r\n\r\n  const loadNextCard = () => {\r\n    let nextCard = store.drawCard()\r\n\r\n    if (nextCard !== undefined) {\r\n      setUseCard(nextCard)\r\n    }\r\n\r\n    else {\r\n      setState({...state, outOfCards: true})\r\n    }\r\n  }\r\n\r\n  if (state.outOfCards) {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <h1>Training complete!</h1>\r\n        <h2>Your got {score} out of {state.numOfCards} correct</h2>\r\n        <Footer/>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div>\r\n        <Header />\r\n          \r\n          <div className=\"largecard\">\r\n            <div>\r\n              {(state.mode === \"kanji\") ? <div className=\"translate\">{useCard.translate[0]}</div> : ''}\r\n            \r\n              {(state.mode === \"hiragana\") ? <div className=\"kanji\">{useCard.kanji}</div> : ''}\r\n            \r\n              {(state.mode === \"translation\") ? <><div className=\"kanji\">{useCard.kanji}</div><div className=\"hiragana\">{useCard.hiragana}</div></> : ''}\r\n            </div>\r\n          </div>\r\n          <div>Type down the right {state.mode}!</div>\r\n          <form>\r\n            <input type=\"text\" id=\"answer\" name=\"answer\" onChange={(e) => setAnswer(e.target.value)}/>\r\n          </form>\r\n          <button type=\"submit\" onClick={(e) => checkAnswer(e)}>Check Answer</button>\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx",["113","114"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nexport default (props: any) => {\r\n  \r\n  const [mode, setMode] = useState('translation')\r\n  const [timer, setTimer] = useState('0')\r\n  const [numOfCards, setNumOfCards] = useState('0')\r\n\r\n  // const startPractice = () => {\r\n    // Can't really figure out how to deal with querySelectorAll in TS\r\n    // Will be dropping the hint selection feature\r\n    // mode kanji -> hint translation\r\n    // mode hiragana -> hint kanji\r\n    // mode translation -> hint kanji + hiragana\r\n\r\n    // const checkboxes = (document.querySelectorAll('input[type=\"checkbox\"]:checked'))\r\n    // const checkboxes = Array.from(document.querySelectorAll('input[type=\"checkbox\"]:checked'))\r\n    // const checkboxes = (document.getElementsByClassName('test') as HTMLInputElement)\r\n    // let checkboxes = [...document.querySelectorAll('input[type=\"checkbox\"]:checked')] <- works\r\n    \r\n    // console.log(checkboxes[0])\r\n    // if (checkboxes.length < 1) {\r\n    //   return // Show modal harus check minimal satu \r\n    // }\r\n    // console.log(checkboxes[0])\r\n    \r\n    // props.history.push('/practice-session')\r\n  // }\r\n\r\n  const startPractice = () => {\r\n    props.history.push({ \r\n      pathname: '/practice-session',\r\n      numOfCards: numOfCards,\r\n      mode: mode\r\n     });\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Practice Settings</h1>\r\n\r\n        <div className=\"form-group\">\r\n          <label className=\"control-label col-md-4\" >Select practice mode:</label>\r\n            <div className=\"col-md-6\">\r\n              <select onChange={(e) => {setMode(e.target.value)}} value={mode}>\r\n                <option value=\"kanji\" >Kanji</option>\r\n                <option value=\"hiragana\" >Hiragana</option>\r\n                <option value=\"translation\">Translation</option>\r\n              </select>\r\n            </div>\r\n        </div>\r\n\r\n        <div>\r\n          Set timer\r\n          <input type=\"number\" onChange={(e) => setTimer(e.target.value)} />\r\n        </div>\r\n\r\n        <div>\r\n          Set number of cards\r\n          <input type=\"number\" onChange={(e) => setNumOfCards(e.target.value)} />\r\n        </div>\r\n\r\n        \r\n              {/* {(mode === 'kanji')\r\n              ? (<>\r\n                <input type=\"checkbox\" value=\"hiragana\" onChange={(e) => changeHint(e)}/> Hiragana\r\n                <input type=\"checkbox\" value=\"translations\" onChange={(e) => changeHint(e)}/> Translations\r\n              </>) : '' }\r\n              {(mode === 'hiragana')\r\n              ? (<>\r\n                <input type=\"checkbox\" value=\"kanji\" onChange={(e) => changeHint(e)}/> Kanji\r\n                <input type=\"checkbox\" value=\"translations\" onChange={(e) => changeHint(e)}/> Translations\r\n              </>) : '' }\r\n              {(mode === 'translation')\r\n              ? (<>\r\n                <input id=\"test\" type=\"checkbox\" checked value=\"kanji\" onChange={(e) => changeHint(e)}/> Kanji\r\n                <input id=\"test\" type=\"checkbox\" checked value=\"hiragana\" onChange={(e) => changeHint(e)}/> Hiragana\r\n              </>) : '' } */}\r\n              \r\n        <button onClick={() => {startPractice()}}>Start Practice!</button>\r\n        <div style={{display:'none'}}>\r\n          <button  onClick={() => console.log(localStorage.removeItem(\"kanjicards\"))}>Remove Local Storage: KanjiCards</button>\r\n          <button  onClick={() => console.log(localStorage.removeItem(\"kanjidecks\"))}>Remove Local Storage: KanjiDecks</button>\r\n          <button  onClick={() => console.log(localStorage.getItem(\"kanjicards\"))}>Check Local Storage: KanjiCards</button>\r\n          <button  onClick={() => console.log(localStorage.getItem(\"kanjidecks\"))}>Check Local Storage: KanjiDecks</button>\r\n        </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"115","replacedBy":"119"},{"ruleId":"117","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":3,"column":11,"nodeType":"123","messageId":"124","endLine":3,"endColumn":16},{"ruleId":"115","replacedBy":"125"},{"ruleId":"117","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":10,"column":1,"nodeType":"129","endLine":74,"endColumn":2},{"ruleId":"121","severity":1,"message":"130","line":3,"column":8,"nodeType":"123","messageId":"124","endLine":3,"endColumn":14},{"ruleId":"127","severity":1,"message":"128","line":5,"column":1,"nodeType":"129","endLine":28,"endColumn":2},{"ruleId":"131","severity":1,"message":"132","line":23,"column":9,"nodeType":"133","endLine":23,"endColumn":12},{"ruleId":"127","severity":1,"message":"128","line":7,"column":1,"nodeType":"129","endLine":44,"endColumn":2},{"ruleId":"127","severity":1,"message":"128","line":7,"column":1,"nodeType":"129","endLine":57,"endColumn":2},{"ruleId":"134","severity":1,"message":"135","line":24,"column":6,"nodeType":"136","endLine":24,"endColumn":8,"suggestions":"137"},{"ruleId":"127","severity":1,"message":"128","line":5,"column":1,"nodeType":"129","endLine":85,"endColumn":2},{"ruleId":"131","severity":1,"message":"132","line":49,"column":9,"nodeType":"133","endLine":49,"endColumn":61},{"ruleId":"127","severity":1,"message":"128","line":7,"column":1,"nodeType":"129","endLine":33,"endColumn":2},{"ruleId":"131","severity":1,"message":"132","line":21,"column":9,"nodeType":"133","endLine":21,"endColumn":67},{"ruleId":"127","severity":1,"message":"128","line":6,"column":1,"nodeType":"129","endLine":74,"endColumn":2},{"ruleId":"127","severity":1,"message":"128","line":7,"column":1,"nodeType":"129","endLine":38,"endColumn":2},{"ruleId":"127","severity":1,"message":"128","line":7,"column":1,"nodeType":"129","endLine":112,"endColumn":2},{"ruleId":"134","severity":1,"message":"138","line":32,"column":6,"nodeType":"136","endLine":32,"endColumn":8,"suggestions":"139"},{"ruleId":"127","severity":1,"message":"128","line":5,"column":1,"nodeType":"129","endLine":93,"endColumn":2},{"ruleId":"121","severity":1,"message":"140","line":8,"column":10,"nodeType":"123","messageId":"124","endLine":8,"endColumn":15},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],["141"],["142"],"@typescript-eslint/no-unused-vars","'Props' is defined but never used.","Identifier","unusedVar",["141"],["142"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Footer' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["143"],"React Hook useEffect has missing dependencies: 'props' and 'state.numOfCards'. Either include them or remove the dependency array.",["144"],"'timer' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [props]",{"range":"149","text":"150"},"Update the dependencies array to be: [props, state.numOfCards]",{"range":"151","text":"152"},[750,752],"[props]",[832,834],"[props, state.numOfCards]"]