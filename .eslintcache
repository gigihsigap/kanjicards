[{"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx":"1","E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx":"2","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx":"3","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx":"4","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx":"5","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx":"6","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx":"7","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx":"8","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx":"9","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx":"10","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx":"11","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx":"12","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx":"13","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx":"14","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx":"15","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx":"16","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx":"17","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx":"18","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx":"19","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\ProgressBar.tsx":"20"},{"size":197,"mtime":1612408274919,"results":"21","hashOfConfig":"22"},{"size":1371,"mtime":1618164551301,"results":"23","hashOfConfig":"22"},{"size":304,"mtime":1615571917661,"results":"24","hashOfConfig":"22"},{"size":970,"mtime":1612426125034,"results":"25","hashOfConfig":"22"},{"size":327,"mtime":1612426976529,"results":"26","hashOfConfig":"22"},{"size":477,"mtime":1612971232925,"results":"27","hashOfConfig":"22"},{"size":403,"mtime":1612971583170,"results":"28","hashOfConfig":"22"},{"size":2461,"mtime":1618202813964,"results":"29","hashOfConfig":"22"},{"size":1464,"mtime":1618203502202,"results":"30","hashOfConfig":"22"},{"size":507,"mtime":1618163554114,"results":"31","hashOfConfig":"22"},{"size":1572,"mtime":1616162491739,"results":"32","hashOfConfig":"22"},{"size":4098,"mtime":1618164334020,"results":"33","hashOfConfig":"22"},{"size":2331,"mtime":1617278801116,"results":"34","hashOfConfig":"22"},{"size":2722,"mtime":1618202892846,"results":"35","hashOfConfig":"22"},{"size":1036,"mtime":1616166128901,"results":"36","hashOfConfig":"22"},{"size":2305,"mtime":1616165797692,"results":"37","hashOfConfig":"22"},{"size":327,"mtime":1616166195396,"results":"38","hashOfConfig":"22"},{"size":6498,"mtime":1618162826549,"results":"39","hashOfConfig":"22"},{"size":1819,"mtime":1618165942286,"results":"40","hashOfConfig":"22"},{"size":803,"mtime":1616145473054,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"ctfnla",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx",[],["93","94"],"E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx",["95"],"import React, {useEffect} from 'react';\nimport {\n  MemoryRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport './App.css';\n\nimport About from './pages/About';\nimport AddCard from './pages/AddCard';\nimport EditCard from './pages/EditCard';\nimport HomePage from './pages/HomePage';\nimport PracticeSession from './pages/PracticeSession';\nimport PracticeSettings from './pages/PracticeSettings';\nimport DeckList from './pages/DeckList';\nimport ExportDeck from './pages/ExportDeck';\nimport AddDeck from './pages/AddDeck';\nimport PreMadeDecks from './pages/PreMadeDecks';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/add-card\" component={AddCard} />\n          <Route path=\"/edit-card\" component={EditCard} />\n          <Route path=\"/deck-list\" component={DeckList} />\n          <Route path=\"/add-deck\" component={AddDeck} />\n          <Route path=\"/export-deck\" component={ExportDeck} />\n          <Route path=\"/premades\" component={PreMadeDecks} />\n          <Route path=\"/practice-settings\" component={PracticeSettings} />\n          <Route path=\"/practice-session\" component={PracticeSession} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx",[],["96","97"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx",["98"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx",[],["99","100"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx",["101"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx",["102"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx",["103"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    \r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n\r\n    // Validate empty card\r\n    if (kanji === '') { return }\r\n    if (hiragana === '') { return }\r\n    if (translate.length === 0) { return }\r\n\r\n    store.addCard(obj)\r\n    props.history.push('/')\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-section\">\r\n        <h1>Add New Card</h1>\r\n        <form onSubmit={(e) => submitForm(e)}>\r\n          <div className=\"largecard\">\r\n            <input type=\"text\" style={{fontSize: '3em'}} placeholder=\"kanji\" name=\"kanji\" value={kanji} onChange={(e) => setKanji(e.target.value)}/>\r\n            <input type=\"text\" style={{fontSize: '1.5em'}} placeholder=\"hiragana\" name=\"hiragana\" value={hiragana} onChange={(e) => setHiragana(e.target.value)}/>\r\n            <input type=\"text\" style={{fontSize: '1em'}} placeholder=\"translation\" name=\"translate\" value={translate} onChange={(e) => setTranslate(e.target.value)}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">Save Card</button>\r\n        </form>\r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx",["104","105"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  useEffect(() => {\r\n    let obj = {\r\n      kanji: '',\r\n      hiragana: '',\r\n      translate: ['']\r\n    }\r\n\r\n    let cardData = props.location.cardData || obj\r\n    setKanji(cardData.kanji)\r\n    setHiragana(cardData.hiragana)\r\n    setTranslate(cardData.translate.join(','))\r\n  }, [])\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n\r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n\r\n    // Validate empty card\r\n    if (kanji === '') { return }\r\n    if (hiragana === '') { return }\r\n    if (translate.length === 0) { return }\r\n    \r\n    store.cards[props.location.id].changeContent(obj)\r\n    store.saveToLocalStorage()\r\n    props.history.push({\r\n      pathname:\"/\"\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Edit Card</h1>\r\n        <form onSubmit={(e) => submitForm(e)}>\r\n          <div className=\"largecard\">\r\n            <input\r\n              className=\"kanji\"\r\n              type=\"text\"\r\n              style={{fontSize: '3em'}}\r\n              placeholder=\"kanji\"\r\n              name=\"kanji\"\r\n              value={kanji}\r\n              onChange={(e) => setKanji(e.target.value)}/>\r\n            <input\r\n              className=\"hiragana\"\r\n              type=\"text\"\r\n              style={{fontSize: '1.5em'}}\r\n              placeholder=\"hiragana\"\r\n              name=\"hiragana\"\r\n              value={hiragana}\r\n              onChange={(e) => setHiragana(e.target.value)}/>\r\n            <input\r\n              className=\"translate\"\r\n              type=\"text\"\r\n              style={{fontSize: '1em'}}\r\n              placeholder=\"translation\"\r\n              name=\"translate\"\r\n              value={translate}\r\n              onChange={(e) => setTranslate(e.target.value)}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">Save Card</button>\r\n        </form>\r\n        <button className=\"btn\">Delete Card</button>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx",["106","107"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx",["108","109"],"import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n\r\n  const downloadJSON = () => {\r\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.cards));\r\n    var dlAnchorElem:any = document.getElementById('downloadAnchorElem');\r\n    dlAnchorElem.setAttribute(\"href\",dataStr);\r\n    // TODO: Allow space on file name?\r\n    dlAnchorElem.setAttribute(\"download\", `${store.name}.json`);\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Export Deck</h1>\r\n        <a id=\"downloadAnchorElem\" onClick={() => downloadJSON()}>\r\n          <button className=\"btn\">Click here to download as JSON!</button>\r\n        </a>\r\n        <div>\r\n          <textarea\r\n            defaultValue={JSON.stringify(store.cards,null,2)}\r\n            style={{width:'500px', height:'300px', marginTop: '1em'}}\r\n            />\r\n        </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx",["110"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [deckName, setDeckName] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    if (!deckName) { return }\r\n\r\n    let obj = {\r\n      name: deckName,\r\n      cards: []\r\n    }\r\n    store.replaceDeck(obj)\r\n    store.saveToLocalStorage()\r\n    props.history.push(\"/\")\r\n  }\r\n\r\n  const uploadJSON = () => {\r\n    const selectFiles:any = document.getElementById('selectFiles')\r\n    const files = selectFiles.files;\r\n    // console.log(files);\r\n    if (files.length <= 0) {\r\n      return false;\r\n    }\r\n\r\n    const fr = new FileReader();\r\n    \r\n    fr.onload = function(e: any) { \r\n      // console.log('onload', e);\r\n      if (!e.target.result) { return }\r\n      const result = JSON.parse(e.target.result);\r\n      const formatted = JSON.stringify(result, null, 2);\r\n      const target:any = document.getElementById('result')\r\n      target.value = formatted;\r\n\r\n      let obj = {\r\n        name: deckName,\r\n        cards: result || []\r\n      }\r\n      store.replaceDeck(obj)\r\n      store.saveToLocalStorage()\r\n      props.history.push(\"/\")\r\n    }\r\n    // console.log('readastext', fr)\r\n    fr.readAsText(files.item(0));\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header/>\r\n        <h1>Create New Deck</h1>\r\n        <div>\r\n          <form style={{display:'flex', alignItems: 'center', flexFlow:'column'}} onSubmit={(e) => submitForm(e)}>\r\n            <input placeholder=\"Insert deck name here...\" type=\"text\" onChange={(e) => setDeckName(e.target.value)}/>\r\n            <button type=\"submit\" className=\"btn\">Build New Deck</button>\r\n          </form>\r\n        </div>\r\n\r\n        <div style={{display: 'flex', justifyContent: 'center', flexFlow: 'column', maxWidth: '500px', margin: '0 auto'}}>\r\n          <textarea id=\"result\" style={{width:'250px', height:'250px', margin: '1em auto'}}>\r\n          \r\n          </textarea>\r\n          <input style={{width: '300px', margin: '1em auto'}} type=\"file\" id=\"selectFiles\"/>\r\n          <button style={{width: '300px', margin: '0 auto'}} className=\"btn\" id=\"import\" onClick={() => uploadJSON()}>Click to Import Cards from JSON file</button>\r\n        </div>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx",["111","112","113"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default () => {\r\n  // TODO: Add premade decks section\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n        \r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx",["114","115"],"import React, { useEffect, useState } from 'react';\r\nimport ProgressBar from '../components/ProgressBar'\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nlet correctAnswers:any = [];\r\nlet wrongAnswers:any = [];\r\n\r\nexport default (props: any) => {\r\n  const [answer, setAnswer] = useState('')\r\n  const [useCard, setUseCard] = useState({\r\n    kanji: '',\r\n    hiragana: '',\r\n    translate: [''],\r\n  })\r\n  const [state, setState] = useState({\r\n    mode: props.location.mode,\r\n    promptType: props.location.promptType,\r\n    answerType: props.location.answerType,\r\n    numOfCards: Number(props.location.numOfCards),\r\n    outOfCards: false,\r\n    showResult: true,\r\n  })\r\n  const [progress, setProgress] = useState(0)\r\n  const [score, setScore] = useState(0)\r\n\r\n  useEffect(() => {\r\n    correctAnswers = []\r\n    wrongAnswers = []\r\n    store.shuffleAllCards()\r\n    store.setNumOfCards(state.numOfCards)\r\n    const firstcard = store.drawCard()\r\n    setUseCard(firstcard)\r\n  }, [])\r\n\r\n  const ifCorrect = () => {\r\n    setScore(score + 1)\r\n    correctAnswers.push(useCard)\r\n  }\r\n\r\n  const ifWrong = () => {\r\n    const prompt:\"kanji\"|\"hiragana\"|\"translate\" = state.promptType\r\n    const check:\"kanji\"|\"hiragana\"|\"translate\" = state.answerType\r\n    let obj = {\r\n      check: false,\r\n      prompt: useCard[prompt],\r\n      input: answer,\r\n      correctAnswer: useCard[check],\r\n    }\r\n    if (prompt === \"translate\") obj.prompt = useCard.translate[0]\r\n    if (check === \"translate\") obj.correctAnswer = useCard.translate.slice(0,2).join(', ')\r\n    wrongAnswers.push(obj)\r\n  }\r\n\r\n  const checkAnswer = (e: any) => {\r\n    e.preventDefault()\r\n    if (!answer) return\r\n\r\n    let correctAnswer = ''\r\n    let translations = ['']\r\n\r\n    switch (state.mode) {\r\n      case 'kanji':\r\n        correctAnswer = useCard.kanji\r\n        break\r\n      case 'hiragana':\r\n        correctAnswer = useCard.hiragana\r\n        break\r\n      case 'translation':\r\n        translations = useCard.translate\r\n        break\r\n      default: break\r\n    }\r\n    \r\n    (answer === correctAnswer || translations.includes(answer)) ? ifCorrect() : ifWrong()\r\n    \r\n    const meter = (state.numOfCards-store.currentSession.deck.length)*100/state.numOfCards\r\n    setProgress(meter)\r\n\r\n    // Empties input form\r\n    Array.from(document.querySelectorAll(\"input\")).forEach(\r\n      input => (input.value = \"\")\r\n    );\r\n    setAnswer('')\r\n\r\n    loadNextCard()\r\n  }\r\n\r\n  const loadNextCard = () => {\r\n    let nextCard = store.drawCard()\r\n\r\n    if (nextCard !== undefined) {\r\n      setUseCard(nextCard)\r\n    }\r\n\r\n    else {\r\n      setState({...state, outOfCards: true})\r\n    }\r\n  }\r\n\r\n  const cancelPractice = () => {\r\n    props.history.push('/')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <div className=\"score\">\r\n          <div>Timer:</div>\r\n          <span>--</span>\r\n        </div>\r\n        <ProgressBar bgcolor=\"#6a1b9a\" completed={progress}/>\r\n        <div className=\"cancelpractice\" onClick={cancelPractice}>\r\n          X\r\n        </div>\r\n      </div>\r\n      {(state.outOfCards)\r\n      ? (<>\r\n          <h1>Practice complete!</h1>\r\n          <div style={{fontSize: '1.5em', margin: '0.5em 0'}}>You got {score} out of {state.numOfCards} cards correct!</div>\r\n          <div>\r\n            {(state.showResult)\r\n            ? <button className=\"btn\" onClick={() => (setState({...state, showResult: false}))}>Show Wrong Answers</button>\r\n            : <button className=\"btn\" onClick={() => (setState({...state, showResult: true}))}>Show Correct Answers</button>\r\n            }\r\n          </div>\r\n          <div>\r\n            {(state.showResult)\r\n            ? <div style={{fontSize: '1.2em', margin: '0.5em 0'}}>You answered correct on these cards:</div>\r\n            : <div style={{fontSize: '1.2em', margin: '0.5em 0'}}>... And here's where you can improve. Try again!</div>\r\n            }\r\n          </div>\r\n          <div>\r\n            {(state.showResult)\r\n            ? (<>\r\n              <div className=\"cardlist\">\r\n                {correctAnswers.map((card:any, id:number) => {\r\n                  return (\r\n                    <div key={id} className=\"resultcard\" id=\"true\">\r\n                      <div className=\"kanji\">{card.kanji}</div>\r\n                      <div className=\"hiragana\">({card.hiragana})</div>\r\n                      <div className=\"translate\">{card.translate.slice(0,2).join(', ')}</div>\r\n                    </div>\r\n                  )}\r\n                )}\r\n              </div>\r\n            </>)\r\n            : (<>\r\n              <div className=\"cardlist\">\r\n              {wrongAnswers.map((card:any, id:number) => {\r\n                return (\r\n                  <div key={id} className=\"resultcard\" id=\"false\">\r\n                    <div style={{fontSize: '2.3em', marginBottom: '0.05em'}}>{card.prompt}</div>\r\n                    <div className=\"lefttext\">Your answer: </div>\r\n                    <div className=\"righttext\">{card.input}</div>\r\n                    <div className=\"lefttext\">Correct answer: </div>\r\n                    <div className=\"righttext\">{card.correctAnswer}</div>\r\n                  </div>\r\n                )}\r\n              )}\r\n              </div>\r\n            </>)}\r\n          </div>\r\n        </>)\r\n      : (<div>\r\n        <div style={{height:'20px'}}></div>\r\n          <div className=\"largecard\">\r\n            <div>\r\n              {(state.mode === \"kanji\") ? <>\r\n                <div className=\"translate\" style={{fontSize: '2.5em'}}>{useCard.translate[0]}</div>\r\n              </> : ''}\r\n            \r\n              {(state.mode === \"hiragana\") ? <>\r\n                <div className=\"kanji\">{useCard.kanji}</div>\r\n              </> : ''}\r\n            \r\n              {(state.mode === \"translation\") ? <>\r\n                <div className=\"kanji\">{useCard.kanji}</div>\r\n                <div className=\"hiragana\">{useCard.hiragana}</div>\r\n              </> : ''}\r\n            </div>\r\n          </div>\r\n          <div style={{margin:'1em 0'}}>\r\n            What is the correct {state.mode} for this word?\r\n          </div>\r\n          <form style={{display:'flex', alignItems: 'center', flexFlow:'column'}} onSubmit={(e) => checkAnswer(e)}>\r\n            <input\r\n              type=\"text\"\r\n              id=\"answer\"\r\n              name=\"answer\" \r\n              placeholder=\"Type your answer here!\"\r\n              onChange={(e) => setAnswer(e.target.value)}/> \r\n            <button className=\"btn\" type=\"submit\">Submit</button>\r\n          </form>\r\n        </div>)}\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx",["116"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  // TODO: Add timed practice feature\r\n  // const [timer, setTimer] = useState('0')\r\n  const [numOfCards, setNumOfCards] = useState(store.cards.length)\r\n\r\n  const startPractice = (mode: string, promptType: string, answerType: string) => {\r\n    // TODO: Show settings error message\r\n    if (numOfCards > store.cards.length || numOfCards <= 0) { return }\r\n    props.history.push({ \r\n      pathname: '/practice-session',\r\n      numOfCards: numOfCards,\r\n      promptType: promptType,\r\n      answerType: answerType,\r\n      mode: mode\r\n     });\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1 style={{marginTop: '0.2em'}}>Choose a practice mode:</h1>\r\n        <div style={{display: 'flex', maxWidth: '500px', margin: '0 auto', flexFlow: 'column'}}>\r\n          \r\n          <div className=\"settingoption\" onClick={() => startPractice('translation', 'kanji', 'translate')}>\r\n            Kanji + Hiragana → Translation\r\n          </div>\r\n          <div className=\"settingoption\" onClick={() => startPractice('hiragana', 'kanji', 'hiragana')}>\r\n            Kanji → Hiragana\r\n          </div>\r\n          <div className=\"settingoption\" onClick={() => startPractice('kanji', 'translate', 'kanji')}>\r\n            Translation → Kanji\r\n          </div>\r\n        </div>\r\n\r\n        <h2>Other Settings:</h2>\r\n\r\n        <div >\r\n          Set number of cards: \r\n          <input style={{maxWidth: '2em', margin: '0 1em'}} type=\"number\" min={1} max={store.cards.length} onChange={(e) => setNumOfCards(e.target.value)} value={numOfCards} />\r\n        </div>\r\n              \r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\ProgressBar.tsx",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":16,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"117","replacedBy":"125"},{"ruleId":"119","replacedBy":"126"},{"ruleId":"121","severity":1,"message":"127","line":3,"column":11,"nodeType":"123","messageId":"124","endLine":3,"endColumn":16},{"ruleId":"117","replacedBy":"128"},{"ruleId":"119","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":9,"column":1,"nodeType":"132","endLine":82,"endColumn":2},{"ruleId":"130","severity":1,"message":"131","line":4,"column":1,"nodeType":"132","endLine":34,"endColumn":2},{"ruleId":"130","severity":1,"message":"131","line":7,"column":1,"nodeType":"132","endLine":47,"endColumn":2},{"ruleId":"130","severity":1,"message":"131","line":7,"column":1,"nodeType":"132","endLine":83,"endColumn":2},{"ruleId":"133","severity":1,"message":"134","line":23,"column":6,"nodeType":"135","endLine":23,"endColumn":8,"suggestions":"136"},{"ruleId":"130","severity":1,"message":"131","line":5,"column":1,"nodeType":"132","endLine":87,"endColumn":2},{"ruleId":"137","severity":1,"message":"138","line":49,"column":9,"nodeType":"139","endLine":49,"endColumn":61},{"ruleId":"130","severity":1,"message":"131","line":7,"column":1,"nodeType":"132","endLine":33,"endColumn":2},{"ruleId":"137","severity":1,"message":"138","line":21,"column":9,"nodeType":"139","endLine":21,"endColumn":67},{"ruleId":"130","severity":1,"message":"131","line":6,"column":1,"nodeType":"132","endLine":72,"endColumn":2},{"ruleId":"121","severity":1,"message":"140","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"141","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":7,"column":1,"nodeType":"132","endLine":17,"endColumn":2},{"ruleId":"130","severity":1,"message":"131","line":9,"column":1,"nodeType":"132","endLine":198,"endColumn":2},{"ruleId":"133","severity":1,"message":"142","line":34,"column":6,"nodeType":"135","endLine":34,"endColumn":8,"suggestions":"143"},{"ruleId":"130","severity":1,"message":"131","line":7,"column":1,"nodeType":"132","endLine":51,"endColumn":2},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["144"],["145"],"'Props' is defined but never used.",["144"],["145"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.cardData'. Either include it or remove the dependency array.","ArrayExpression",["146"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'store' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'state.numOfCards'. Either include it or remove the dependency array.",["147"],"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},"Update the dependencies array to be: [props.location.cardData]",{"range":"152","text":"153"},"Update the dependencies array to be: [state.numOfCards]",{"range":"154","text":"155"},[641,643],"[props.location.cardData]",[965,967],"[state.numOfCards]"]