[{"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx":"1","E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx":"2","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx":"3","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx":"4","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CardList.tsx":"5","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx":"6","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx":"7","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx":"8","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx":"9","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx":"10","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx":"11","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx":"12","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx":"13","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx":"14","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx":"15","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx":"16","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx":"17","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx":"18","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx":"19","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx":"20","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\ProgressBar.tsx":"21"},{"size":197,"mtime":1612408274919,"results":"22","hashOfConfig":"23"},{"size":1358,"mtime":1615983331562,"results":"24","hashOfConfig":"23"},{"size":304,"mtime":1615571917661,"results":"25","hashOfConfig":"23"},{"size":970,"mtime":1612426125034,"results":"26","hashOfConfig":"23"},{"size":333,"mtime":1614517151516,"results":"27","hashOfConfig":"23"},{"size":327,"mtime":1612426976529,"results":"28","hashOfConfig":"23"},{"size":477,"mtime":1612971232925,"results":"29","hashOfConfig":"23"},{"size":403,"mtime":1612971583170,"results":"30","hashOfConfig":"23"},{"size":2305,"mtime":1616168814974,"results":"31","hashOfConfig":"23"},{"size":1297,"mtime":1616166083658,"results":"32","hashOfConfig":"23"},{"size":507,"mtime":1615989688901,"results":"33","hashOfConfig":"23"},{"size":1572,"mtime":1616162491739,"results":"34","hashOfConfig":"23"},{"size":4098,"mtime":1616166287333,"results":"35","hashOfConfig":"23"},{"size":2331,"mtime":1617278801116,"results":"36","hashOfConfig":"23"},{"size":2643,"mtime":1616162378402,"results":"37","hashOfConfig":"23"},{"size":1036,"mtime":1616166128901,"results":"38","hashOfConfig":"23"},{"size":2305,"mtime":1616165797692,"results":"39","hashOfConfig":"23"},{"size":327,"mtime":1616166195396,"results":"40","hashOfConfig":"23"},{"size":6371,"mtime":1618158241012,"results":"41","hashOfConfig":"23"},{"size":1786,"mtime":1618155444132,"results":"42","hashOfConfig":"23"},{"size":803,"mtime":1616145473054,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"ctfnla",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"E:\\Projects\\Portfolio\\kanjicards\\src\\index.tsx",[],["97","98"],"E:\\Projects\\Portfolio\\kanjicards\\src\\App.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Footer.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Counter.tsx",[],["99","100"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CardList.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\CompleteCard.tsx",["101"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoListItem.tsx",[],["102","103"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\TodoList.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\HomePage.tsx",["104"],"import React, { useState, useEffect }  from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport CardList from '../components/CardList';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [refresh, setRefresh] = useState(true)\r\n\r\n  useEffect(() => {}, [refresh])\r\n\r\n  const addCard = () => {\r\n    props.history.push({\r\n      pathname:\"/add-card\"\r\n    })\r\n  }\r\n  \r\n  const editCard = (id: number, card: CardContent) => {\r\n    props.history.push({\r\n      pathname:\"/edit-card\",\r\n      cardData: card,\r\n      id: id\r\n    })\r\n  }\r\n\r\n  const deleteCard = async (id: number) => {\r\n    store.removeCard(id)\r\n    setRefresh(!refresh);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-section\" >\r\n        Your current deck is: <span style={{fontSize: '1.2em', fontWeight: 500}}> {store.name}</span>\r\n        <div className=\"button-links\">\r\n          <Link to=\"/practice-settings\" >\r\n            <button className=\"btn\" id=\"practice\">Practice!</button>\r\n          </Link>\r\n          <Link to=\"/deck-list\" >\r\n            <button className=\"btn\">Manage Deck</button>\r\n          </Link>\r\n          <Link to=\"/add-card\" >\r\n            <button className=\"btn\">Add Card</button>\r\n          </Link>\r\n          <Link to=\"/export-deck\" >\r\n            <button className=\"btn\">Export Deck</button>\r\n          </Link>\r\n        </div>\r\n        <CardList/>\r\n        <div className=\"cardlist\">\r\n          {store.cards.map((card:CardContent, id:number) => {\r\n            return (\r\n              <div key={id} className=\"smallcard\" >\r\n                <div onClick={() => editCard(id, card)}>\r\n                  <div className=\"kanji\">{card.kanji}</div>\r\n                  <div className=\"hiragana\">({card.hiragana})</div>\r\n                  <div className=\"translate\">{card.translate.slice(0,2).join(', ')}</div>\r\n                </div>\r\n                <div className=\"xbutton\" onClick={() => deleteCard(id)}>x</div>\r\n              </div>\r\n            )}\r\n          )}\r\n          <div className=\"smallcard\" onClick={() => addCard()}>\r\n            <div className=\"plusbutton\">+</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\About.tsx",["105"],"import React from 'react';\r\nimport Header from '../components/Header';\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <h1>About the Project</h1>\r\n        <div className=\"main-section\" style={{maxWidth: '680px',textAlign:\"justify\", margin: '0 auto'}}>\r\n        Kanjicards is an app for memorizing Kanji words. Somehow they operate differently from individual kanji letters.\r\n        So I made this app to prepare for a Japanese language course and practice my TypeScript. Two birds with one stone.\r\n        <br></br>\r\n        <br></br>\r\n        In case you're here just to use the Practice feature, I prepared some of the cards I used during my studies\r\n        so you don't have to make them from scratch.\r\n        <br></br>\r\n        <br></br>\r\n        This project is heavily inspired from Pseudomon's <u><a style={{color: '#ffffff'}} href=\"https://pseudomon.github.io/lightningcards/#\">Lightning Cards</a></u>. This app is completely front-end,\r\n        so you can save the page and it'll work offline. It automatically saves your decks locally in your browser,\r\n        but you can also use the import/exporter feature to create a backup or to move to a different system/browser.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\components\\Header.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddCard.tsx",["106"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    \r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n\r\n    // Validate empty card\r\n    if (kanji === '') { return }\r\n    if (hiragana === '') { return }\r\n    if (translate.length === 0) { return }\r\n\r\n    store.addCard(obj)\r\n    props.history.push('/')\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"main-section\">\r\n        <h1>Add New Card</h1>\r\n        <form onSubmit={(e) => submitForm(e)}>\r\n          <div className=\"largecard\">\r\n            <input type=\"text\" style={{fontSize: '3em'}} placeholder=\"kanji\" name=\"kanji\" value={kanji} onChange={(e) => setKanji(e.target.value)}/>\r\n            <input type=\"text\" style={{fontSize: '1.5em'}} placeholder=\"hiragana\" name=\"hiragana\" value={hiragana} onChange={(e) => setHiragana(e.target.value)}/>\r\n            <input type=\"text\" style={{fontSize: '1em'}} placeholder=\"translation\" name=\"translate\" value={translate} onChange={(e) => setTranslate(e.target.value)}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">Save Card</button>\r\n        </form>\r\n      </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\store.tsx",[],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\EditCard.tsx",["107","108"],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n  const [kanji, setKanji] = useState('')\r\n  const [hiragana, setHiragana] = useState('')\r\n  const [translate, setTranslate] = useState('')\r\n\r\n  useEffect(() => {\r\n    let obj = {\r\n      kanji: '',\r\n      hiragana: '',\r\n      translate: ['']\r\n    }\r\n\r\n    let cardData = props.location.cardData || obj\r\n    setKanji(cardData.kanji)\r\n    setHiragana(cardData.hiragana)\r\n    setTranslate(cardData.translate.join(','))\r\n  }, [])\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n\r\n    const obj:CardContent = {\r\n      kanji,\r\n      hiragana,\r\n      translate:translate.split(',')\r\n    }\r\n\r\n    // Validate empty card\r\n    if (kanji === '') { return }\r\n    if (hiragana === '') { return }\r\n    if (translate.length === 0) { return }\r\n    \r\n    store.cards[props.location.id].changeContent(obj)\r\n    store.saveToLocalStorage()\r\n    props.history.push({\r\n      pathname:\"/\"\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Edit Card</h1>\r\n        <form onSubmit={(e) => submitForm(e)}>\r\n          <div className=\"largecard\">\r\n            <input\r\n              className=\"kanji\"\r\n              type=\"text\"\r\n              style={{fontSize: '3em'}}\r\n              placeholder=\"kanji\"\r\n              name=\"kanji\"\r\n              value={kanji}\r\n              onChange={(e) => setKanji(e.target.value)}/>\r\n            <input\r\n              className=\"hiragana\"\r\n              type=\"text\"\r\n              style={{fontSize: '1.5em'}}\r\n              placeholder=\"hiragana\"\r\n              name=\"hiragana\"\r\n              value={hiragana}\r\n              onChange={(e) => setHiragana(e.target.value)}/>\r\n            <input\r\n              className=\"translate\"\r\n              type=\"text\"\r\n              style={{fontSize: '1em'}}\r\n              placeholder=\"translation\"\r\n              name=\"translate\"\r\n              value={translate}\r\n              onChange={(e) => setTranslate(e.target.value)}/>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">Save Card</button>\r\n        </form>\r\n        <button className=\"btn\">Delete Card</button>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\DeckList.tsx",["109","110"],"import React, { useState, useEffect }  from 'react';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [decks, setDecks] = useState([store])\r\n\r\n  useEffect(() => {\r\n    store.compileAllDecks()\r\n    const kanjidecks = store.getAllLocalDecks()\r\n    setDecks(kanjidecks)\r\n  }, [])\r\n\r\n  const selectDeck = (id:number, deckData: Array<any>) => {\r\n    store.removeFromLocalDecks(id)\r\n    store.saveToLocalStorage()\r\n    store.replaceDeck(deckData)\r\n    props.history.push({\r\n      pathname:\"/\",\r\n    })\r\n  }\r\n\r\n  const removeDeck = (i: number) => {\r\n    // TODO: Trigger modal?\r\n    if (decks.length <= 1) { return } // TODO: Trigger modal cannot remove\r\n    store.removeFromLocalDecks(i)\r\n    let kanjidecks = store.getAllLocalDecks()\r\n    setDecks(kanjidecks)\r\n  }\r\n\r\n  const routePrevent = (route: number) => {\r\n    // This routing is specific to DeckList page\r\n    // to prevent duplicates in local storage data\r\n    // by selecting default deck before switching route\r\n    store.removeFromLocalDecks(decks.length-1)\r\n    store.saveToLocalStorage()\r\n    store.replaceDeck(store)\r\n\r\n    if (route === 1) props.history.push(\"/\")\r\n    if (route === 2) props.history.push(\"/practice-settings\")\r\n    if (route === 3) props.history.push(\"/add-deck\")\r\n    if (route === 4) props.history.push(\"/about\")\r\n    \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <a className=\"logo\" onClick={() => routePrevent(1)}>\r\n          Kanji Cards\r\n        </a>\r\n        <button className=\"btn\" id=\"practice\" onClick={() => routePrevent(2)}>\r\n          Practice!\r\n        </button>\r\n      </div>\r\n      \r\n      <button onClick={() => routePrevent(3)} className=\"btn\">\r\n        Create New Deck\r\n      </button>\r\n      <div style={{margin: \"1em\"}}>\r\n        Select a deck to study with:\r\n      </div>\r\n      <div className=\"main-section\" >\r\n        <div className=\"cardlist\">\r\n          {decks.map((deck:any, id:number) => {\r\n            return (\r\n              <div>\r\n                <div key={id} className=\"smallcard\"> \r\n                    <div>{deck.name}</div>\r\n                    <div>Number of cards: {deck.cards.length}</div>\r\n                </div>\r\n                <button className=\"btn\" onClick={() => selectDeck(Number(id), deck)}>Select Deck</button>\r\n                <button className=\"btn\" onClick={() => removeDeck(Number(id))}>Remove Deck</button>\r\n              </div>\r\n            )}\r\n          )}\r\n        </div>\r\n          \r\n        \r\n        \r\n      </div>\r\n      <div className=\"footer\">\r\n        <button onClick={() => routePrevent(4)}>?</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\ExportDeck.tsx",["111","112"],"import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props:any) => {\r\n\r\n  const downloadJSON = () => {\r\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(store.cards));\r\n    var dlAnchorElem:any = document.getElementById('downloadAnchorElem');\r\n    dlAnchorElem.setAttribute(\"href\",dataStr);\r\n    // TODO: Allow space on file name?\r\n    dlAnchorElem.setAttribute(\"download\", `${store.name}.json`);\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header />\r\n        <h1>Export Deck</h1>\r\n        <a id=\"downloadAnchorElem\" onClick={() => downloadJSON()}>\r\n          <button className=\"btn\">Click here to download as JSON!</button>\r\n        </a>\r\n        <div>\r\n          <textarea\r\n            defaultValue={JSON.stringify(store.cards,null,2)}\r\n            style={{width:'500px', height:'300px', marginTop: '1em'}}\r\n            />\r\n        </div>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\AddDeck.tsx",["113"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default (props: any) => {\r\n  const [deckName, setDeckName] = useState('')\r\n\r\n  const submitForm = async (e: any) => {\r\n    e.preventDefault()\r\n    if (!deckName) { return }\r\n\r\n    let obj = {\r\n      name: deckName,\r\n      cards: []\r\n    }\r\n    store.replaceDeck(obj)\r\n    store.saveToLocalStorage()\r\n    props.history.push(\"/\")\r\n  }\r\n\r\n  const uploadJSON = () => {\r\n    const selectFiles:any = document.getElementById('selectFiles')\r\n    const files = selectFiles.files;\r\n    // console.log(files);\r\n    if (files.length <= 0) {\r\n      return false;\r\n    }\r\n\r\n    const fr = new FileReader();\r\n    \r\n    fr.onload = function(e: any) { \r\n      // console.log('onload', e);\r\n      if (!e.target.result) { return }\r\n      const result = JSON.parse(e.target.result);\r\n      const formatted = JSON.stringify(result, null, 2);\r\n      const target:any = document.getElementById('result')\r\n      target.value = formatted;\r\n\r\n      let obj = {\r\n        name: deckName,\r\n        cards: result || []\r\n      }\r\n      store.replaceDeck(obj)\r\n      store.saveToLocalStorage()\r\n      props.history.push(\"/\")\r\n    }\r\n    // console.log('readastext', fr)\r\n    fr.readAsText(files.item(0));\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <Header/>\r\n        <h1>Create New Deck</h1>\r\n        <div>\r\n          <form style={{display:'flex', alignItems: 'center', flexFlow:'column'}} onSubmit={(e) => submitForm(e)}>\r\n            <input placeholder=\"Insert deck name here...\" type=\"text\" onChange={(e) => setDeckName(e.target.value)}/>\r\n            <button type=\"submit\" className=\"btn\">Build New Deck</button>\r\n          </form>\r\n        </div>\r\n\r\n        <div style={{display: 'flex', justifyContent: 'center', flexFlow: 'column', maxWidth: '500px', margin: '0 auto'}}>\r\n          <textarea id=\"result\" style={{width:'250px', height:'250px', margin: '1em auto'}}>\r\n          \r\n          </textarea>\r\n          <input style={{width: '300px', margin: '1em auto'}} type=\"file\" id=\"selectFiles\"/>\r\n          <button style={{width: '300px', margin: '0 auto'}} className=\"btn\" id=\"import\" onClick={() => uploadJSON()}>Click to Import Cards from JSON file</button>\r\n        </div>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PreMadeDecks.tsx",["114","115","116"],"import React, { useState } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\nconst {store} = require('../store.tsx');\r\n\r\nexport default () => {\r\n  // TODO: Add premade decks section\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n        \r\n      <Footer/>\r\n    </div>\r\n  );\r\n}","E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSession.tsx",["117","118"],"E:\\Projects\\Portfolio\\kanjicards\\src\\pages\\PracticeSettings.tsx",["119"],"E:\\Projects\\Portfolio\\kanjicards\\src\\components\\ProgressBar.tsx",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"120","replacedBy":"124"},{"ruleId":"122","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":3,"column":11,"nodeType":"128","messageId":"129","endLine":3,"endColumn":16},{"ruleId":"120","replacedBy":"130"},{"ruleId":"122","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":10,"column":1,"nodeType":"134","endLine":75,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":4,"column":1,"nodeType":"134","endLine":26,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":47,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":83,"endColumn":2},{"ruleId":"135","severity":1,"message":"136","line":23,"column":6,"nodeType":"137","endLine":23,"endColumn":8,"suggestions":"138"},{"ruleId":"132","severity":1,"message":"133","line":5,"column":1,"nodeType":"134","endLine":87,"endColumn":2},{"ruleId":"139","severity":1,"message":"140","line":49,"column":9,"nodeType":"141","endLine":49,"endColumn":61},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":33,"endColumn":2},{"ruleId":"139","severity":1,"message":"140","line":21,"column":9,"nodeType":"141","endLine":21,"endColumn":67},{"ruleId":"132","severity":1,"message":"133","line":6,"column":1,"nodeType":"134","endLine":72,"endColumn":2},{"ruleId":"126","severity":1,"message":"142","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"126","severity":1,"message":"143","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":13},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":17,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":9,"column":1,"nodeType":"134","endLine":198,"endColumn":2},{"ruleId":"135","severity":1,"message":"144","line":34,"column":6,"nodeType":"137","endLine":34,"endColumn":8,"suggestions":"145"},{"ruleId":"132","severity":1,"message":"133","line":7,"column":1,"nodeType":"134","endLine":51,"endColumn":2},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],["146"],["147"],"@typescript-eslint/no-unused-vars","'Props' is defined but never used.","Identifier","unusedVar",["146"],["147"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.cardData'. Either include it or remove the dependency array.","ArrayExpression",["148"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'store' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'state.numOfCards'. Either include it or remove the dependency array.",["149"],"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [props.location.cardData]",{"range":"154","text":"155"},"Update the dependencies array to be: [state.numOfCards]",{"range":"156","text":"157"},[641,643],"[props.location.cardData]",[965,967],"[state.numOfCards]"]